//Pipeline for new build

pipeline {

	agent none

	options {
		preserveStashes(buildCount: 5)
		buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '3', daysToKeepStr: '15', numToKeepStr: '')
		timestamps()
	}

       triggers {
          pollSCM 'H  * * * *'
       }

	environment {
		jsonFile="NULL"
		JENKINS_NETSHARE='//abtvdfs.de.bosch.com/ismdfs/ilm/abt/CC-PS-Sensors-Jenkins'
		RTC = credentials('sey9abt-lidar')
	}

	parameters {
		booleanParam defaultValue: false, description: '', name: 'caplTestVMPSxBR223CNxD5'
booleanParam defaultValue: false, description: '', name: 'SWUTCTVMPSxBR223CNxD5'
booleanParam defaultValue: false, description: '', name: 'caplTestVMPSxBR223CNxD5xNoSecCom'
booleanParam defaultValue: false, description: '', name: 'SWUTCTVMPSxBR223CNxD5xNoSecCom'
booleanParam defaultValue: false, description: '', name: 'caplTestVMPSxBR223CNxD5onD5EDxNoSecCom'
booleanParam defaultValue: false, description: '', name: 'SWUTCTVMPSxBR223CNxD5onD5EDxNoSecCom'

	}

	stages {
		stage ('Download') {
			agent {
				label 'MPSP_CI'
			}
			steps {
				script {
					if (Boolean.parseBoolean(env.personalBuild)) { currentBuild.displayName = String.format('%s by %s', currentBuild.displayName, User.get(env.buildRequesterUserId).getFullName()) }
				}
				deleteDir()
				lock("${env.JOB_BASE_NAME}") {
					checkout([$class: 'RTCScm', avoidUsingToolkit: false, buildTool: '6.0.3', buildType: [buildDefinition: "${env.JOB_BASE_NAME}", customizedSnapshotName: '', value: 'buildDefinition'], credentialsId: 'sey9abt-lidar', overrideGlobal: false, serverURI: 'https://rb-alm-06-p.de.bosch.com/ccm', timeout: 480])
				}
			   	bat "powershell.exe //abtvdfs.de.bosch.com/ismdfs/ilm/abt/CC-PS-Sensors-Jenkins/OpsLoadJenkinsScriptSources/rb.ps.scripts.dotNet/JenkinsJobsScripts/download/download.ps1"
			}
			post {
				always {
					bat "powershell.exe //abtvdfs.de.bosch.com/ismdfs/ilm/abt/CC-PS-Sensors-Jenkins/OpsLoadJenkinsScriptSources/rb.ps.scripts.dotNet/JenkinsJobsScripts/CreateHTMLReport/CreateHTMLReport.ps1 -JSON_input_file //abtvdfs.de.bosch.com/ismdfs/ilm/abt/CC-PS-Sensors-Jenkins/%JOB_BASE_NAME%/%BUILD_NUMBER%/download/result.json -WorkDirSubfolderName ."
					script {
						jsonFile = "//abtvdfs.de.bosch.com/ismdfs/ilm/abt/CC-PS-Sensors-Jenkins/${env.JOB_BASE_NAME}/${env.BUILD_NUMBER}/download/result.json"
					}
					archiveArtifacts 'JobReport.html, Download.cmd'
				}
				cleanup {
					deleteDir()
				}
			}
		} // stage ('Download')

		

		stage ('Build') {
			parallel {
				
stage('ECU: VMPSxBR223CNxD5') {
	agent {
		label 'MPSP_CI'
	}
	
when {
	beforeAgent true
	allOf{
		anyOf {
expression { env.JOB_BASE_NAME ==~  /(?i)RBL_DAI_BR223CN.*?/}

}

	}
}


	steps {
		deleteDir()	
		bat """
			IF EXIST f: (subst f: /d )
			subst f: .
			pushd f:

			powershell.exe //abtvdfs.de.bosch.com/ismdfs/ilm/abt/CC-PS-Sensors-Jenkins/OpsLoadJenkinsScriptSources/rb.ps.scripts.dotNet/JenkinsJobsScripts/build/Build_Freestyle_CDGB.ps1 -Variant VMPSxBR223CNxD5 -PathJSONFile ${jsonFile} -JobNeedsPath //abtvdfs.de.bosch.com/ismdfs/ilm/abt/CC-PS-Sensors-Jenkins/OpsLoadJenkinsScriptSources/rb.ps.scripts.dotNet/JenkinsJobsScripts/build -RunSWUTCT ${SWUTCTVMPSxBR223CNxD5} 

			SET RETURNERROR=%ERRORLEVEL%

			popd
			subst f: /D
				
			exit /b %RETURNERROR%
		"""
	}
	post {
		success {
			archiveArtifacts "**/out/**/ApplContainer_BB*.appl.zip"
			script {
				try {
					def VMPSxBR223CNxD5 = scanForIssues tool: groovyScript(parserId: 'VMPSCompilerID', pattern: '**/_Log_MTCOutput_*.prt')
					publishIssues issues: [VMPSxBR223CNxD5], id:'VMPSxBR223CNxD5', name: 'VMPSxBR223CNxD5'
				} catch (Exception e) {}
			}
		}
		cleanup {
			deleteDir()
		}
	}
} //stage('ECU: VMPSxBR223CNxD5')


stage('ECU: VMPSxBR223CNxD5xNoSecCom') {
	agent {
		label 'MPSP_CI'
	}
	
when {
	beforeAgent true
	allOf{
		anyOf {
expression { env.JOB_BASE_NAME ==~  /(?i)RBL_DAI_BR223CN.*?/}

}

	}
}


	steps {
		deleteDir()	
		bat """
			IF EXIST f: (subst f: /d )
			subst f: .
			pushd f:

			powershell.exe //abtvdfs.de.bosch.com/ismdfs/ilm/abt/CC-PS-Sensors-Jenkins/OpsLoadJenkinsScriptSources/rb.ps.scripts.dotNet/JenkinsJobsScripts/build/Build_Freestyle_CDGB.ps1 -Variant VMPSxBR223CNxD5xNoSecCom -PathJSONFile ${jsonFile} -JobNeedsPath //abtvdfs.de.bosch.com/ismdfs/ilm/abt/CC-PS-Sensors-Jenkins/OpsLoadJenkinsScriptSources/rb.ps.scripts.dotNet/JenkinsJobsScripts/build -RunSWUTCT ${SWUTCTVMPSxBR223CNxD5xNoSecCom} 

			SET RETURNERROR=%ERRORLEVEL%

			popd
			subst f: /D
				
			exit /b %RETURNERROR%
		"""
	}
	post {
		success {
			archiveArtifacts "**/out/**/ApplContainer_BB*.appl.zip"
			script {
				try {
					def VMPSxBR223CNxD5xNoSecCom = scanForIssues tool: groovyScript(parserId: 'VMPSCompilerID', pattern: '**/_Log_MTCOutput_*.prt')
					publishIssues issues: [VMPSxBR223CNxD5xNoSecCom], id:'VMPSxBR223CNxD5xNoSecCom', name: 'VMPSxBR223CNxD5xNoSecCom'
				} catch (Exception e) {}
			}
		}
		cleanup {
			deleteDir()
		}
	}
} //stage('ECU: VMPSxBR223CNxD5xNoSecCom')


stage('ECU: VMPSxBR223CNxD5onD5EDxNoSecCom') {
	agent {
		label 'MPSP_CI'
	}
	
when {
	beforeAgent true
	allOf{
		anyOf {
expression { env.JOB_BASE_NAME ==~  /(?i)RBL_DAI_BR223CN.*?/}

}

	}
}


	steps {
		deleteDir()	
		bat """
			IF EXIST f: (subst f: /d )
			subst f: .
			pushd f:

			powershell.exe //abtvdfs.de.bosch.com/ismdfs/ilm/abt/CC-PS-Sensors-Jenkins/OpsLoadJenkinsScriptSources/rb.ps.scripts.dotNet/JenkinsJobsScripts/build/Build_Freestyle_CDGB.ps1 -Variant VMPSxBR223CNxD5onD5EDxNoSecCom -PathJSONFile ${jsonFile} -JobNeedsPath //abtvdfs.de.bosch.com/ismdfs/ilm/abt/CC-PS-Sensors-Jenkins/OpsLoadJenkinsScriptSources/rb.ps.scripts.dotNet/JenkinsJobsScripts/build -RunSWUTCT ${SWUTCTVMPSxBR223CNxD5onD5EDxNoSecCom} 

			SET RETURNERROR=%ERRORLEVEL%

			popd
			subst f: /D
				
			exit /b %RETURNERROR%
		"""
	}
	post {
		success {
			archiveArtifacts "**/out/**/ApplContainer_BB*.appl.zip"
			script {
				try {
					def VMPSxBR223CNxD5onD5EDxNoSecCom = scanForIssues tool: groovyScript(parserId: 'VMPSCompilerID', pattern: '**/_Log_MTCOutput_*.prt')
					publishIssues issues: [VMPSxBR223CNxD5onD5EDxNoSecCom], id:'VMPSxBR223CNxD5onD5EDxNoSecCom', name: 'VMPSxBR223CNxD5onD5EDxNoSecCom'
				} catch (Exception e) {}
			}
		}
		cleanup {
			deleteDir()
		}
	}
} //stage('ECU: VMPSxBR223CNxD5onD5EDxNoSecCom')


			} //parallel

		} //stage ('Build')

		stage ('Test') {
			parallel {
				stage('ECU CAPL Testing: VMPSxBR223CNxD5') {
	agent {
		label 'TS_VMPS_HW_D5ED'
	}
	
when {
	beforeAgent true
	allOf{
		anyOf {
expression { env.JOB_BASE_NAME ==~  /(?i)RBL_DAI_BR223CN.*?/}

}
environment name: 'caplTestVMPSxBR223CNxD5', value: 'true'

	}
}


	steps {
		deleteDir()
		catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
			bat """
				IF EXIST f: (subst f: /d )
				subst f: .
				pushd f:
	
				powershell.exe //abtvdfs.de.bosch.com/ismdfs/ilm/abt/CC-PS-Sensors-Jenkins/OpsLoadJenkinsScriptSources/rb.ps.scripts.dotNet/JenkinsJobsScripts/CAPLTesting/Test.ps1 -Variant VMPSxBR223CNxD5 -PathJSONFile ${jsonFile} -ECUBuildStoreFolder ECUBuild -JobNeedsPath //abtvdfs.de.bosch.com/ismdfs/ilm/abt/CC-PS-Sensors-Jenkins/OpsLoadJenkinsScriptSources/rb.ps.scripts.dotNet/JenkinsJobsScripts/CAPLTesting
	
				SET RETURNERROR=%ERRORLEVEL%
	
				popd
				subst f: /D
					
				exit /b %RETURNERROR%
			"""
		}
	}

	post {
		success {
			archiveArtifacts artifacts: "**/TestReport_*.html", allowEmptyArchive: true
		}
		cleanup {
			deleteDir()
		}
	}
} //stage('ECU CAPL Testing: VMPSxBR223CNxD5')

stage('ECU CAPL Testing: VMPSxBR223CNxD5xNoSecCom') {
	agent {
		label 'TS_VMPS_HW_D5ED'
	}
	
when {
	beforeAgent true
	allOf{
		anyOf {
expression { env.JOB_BASE_NAME ==~  /(?i)RBL_DAI_BR223CN.*?/}

}
environment name: 'caplTestVMPSxBR223CNxD5xNoSecCom', value: 'true'

	}
}


	steps {
		deleteDir()
		catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
			bat """
				IF EXIST f: (subst f: /d )
				subst f: .
				pushd f:
	
				powershell.exe //abtvdfs.de.bosch.com/ismdfs/ilm/abt/CC-PS-Sensors-Jenkins/OpsLoadJenkinsScriptSources/rb.ps.scripts.dotNet/JenkinsJobsScripts/CAPLTesting/Test.ps1 -Variant VMPSxBR223CNxD5xNoSecCom -PathJSONFile ${jsonFile} -ECUBuildStoreFolder ECUBuild -JobNeedsPath //abtvdfs.de.bosch.com/ismdfs/ilm/abt/CC-PS-Sensors-Jenkins/OpsLoadJenkinsScriptSources/rb.ps.scripts.dotNet/JenkinsJobsScripts/CAPLTesting
	
				SET RETURNERROR=%ERRORLEVEL%
	
				popd
				subst f: /D
					
				exit /b %RETURNERROR%
			"""
		}
	}

	post {
		success {
			archiveArtifacts artifacts: "**/TestReport_*.html", allowEmptyArchive: true
		}
		cleanup {
			deleteDir()
		}
	}
} //stage('ECU CAPL Testing: VMPSxBR223CNxD5xNoSecCom')

stage('ECU CAPL Testing: VMPSxBR223CNxD5onD5EDxNoSecCom') {
	agent {
		label 'TS_VMPS_HW_D5ED'
	}
	
when {
	beforeAgent true
	allOf{
		anyOf {
expression { env.JOB_BASE_NAME ==~  /(?i)RBL_DAI_BR223CN.*?/}

}
environment name: 'caplTestVMPSxBR223CNxD5onD5EDxNoSecCom', value: 'true'

	}
}


	steps {
		deleteDir()
		catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
			bat """
				IF EXIST f: (subst f: /d )
				subst f: .
				pushd f:
	
				powershell.exe //abtvdfs.de.bosch.com/ismdfs/ilm/abt/CC-PS-Sensors-Jenkins/OpsLoadJenkinsScriptSources/rb.ps.scripts.dotNet/JenkinsJobsScripts/CAPLTesting/Test.ps1 -Variant VMPSxBR223CNxD5onD5EDxNoSecCom -PathJSONFile ${jsonFile} -ECUBuildStoreFolder ECUBuild -JobNeedsPath //abtvdfs.de.bosch.com/ismdfs/ilm/abt/CC-PS-Sensors-Jenkins/OpsLoadJenkinsScriptSources/rb.ps.scripts.dotNet/JenkinsJobsScripts/CAPLTesting
	
				SET RETURNERROR=%ERRORLEVEL%
	
				popd
				subst f: /D
					
				exit /b %RETURNERROR%
			"""
		}
	}

	post {
		success {
			archiveArtifacts artifacts: "**/TestReport_*.html", allowEmptyArchive: true
		}
		cleanup {
			deleteDir()
		}
	}
} //stage('ECU CAPL Testing: VMPSxBR223CNxD5onD5EDxNoSecCom')



				stage("SW-UT/CT") {
	agent any
	
when {
	beforeAgent true
	anyOf{
		expression {env.SWUTCTVMPSxBR223CNxD5}
expression {env.SWUTCTVMPSxBR223CNxD5xNoSecCom}
expression {env.SWUTCTVMPSxBR223CNxD5onD5EDxNoSecCom}

	}
}


	steps {
		script {
			try {build job: "${env.JOB_BASE_NAME}_SW-UT_CT_Delta", parameters: [string(name: 'PathJSONFile', value: jsonFile),string(name: 'Stream', value: env.JOB_BASE_NAME),string(name: 'BuildNumber', value: env.BUILD_NUMBER),booleanParam(name: 'VMPSxBR223CNxD5', value: env.SWUTCTVMPSxBR223CNxD5),booleanParam(name: 'VMPSxBR223CNxD5xNoSecCom', value: env.SWUTCTVMPSxBR223CNxD5xNoSecCom),booleanParam(name: 'VMPSxBR223CNxD5onD5EDxNoSecCom', value: env.SWUTCTVMPSxBR223CNxD5onD5EDxNoSecCom)], wait: false} catch (Exception e) {}
		}
	}
} // stage("SW-UT/CT")

			}
		} //stage ('Test')

		stage ('Deliver'){
			parallel{
				stage("RBL_DAI_BR223CN_VMPS_Int"){
	agent {
		label 'MPSP_CI'
	}
	when {
		allOf{
			expression { env.JOB_BASE_NAME ==~  /RBL_DAI_BR223CN_VMPS_Int/}
			expression { !((env.personalBuild)?.trim()) }
		}
	}
	steps {
		echo 'calling ...'
		script {
			try {build job: "RBL_DAI_BR223CN_VMPS_CN_Team_pullChanges", parameters: [[$class: "StringParameterValue", name: "pathJSONFile", value: "${jsonFile}"]], wait: false} catch (Exception e) {}
try {build job: "RBL_DAI_BR223CN_VMPS_Stable_pullChanges", parameters: [[$class: "StringParameterValue", name: "pathJSONFile", value: "${jsonFile}"]], wait: false} catch (Exception e) {}

		}
		echo 'fire and forget ;-) '
	}
}

			}
		} //stage ('Deliver')

	}
} //pipeline 


