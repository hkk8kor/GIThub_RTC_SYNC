
RTA-OS MISRA Report: rtaos_ccas_score_sc4
=========================================
Copyright ETAS GmbH 2023

Toolchain Report
================

Target: RH850/GHS (5.0.36)
Code Generator: RTA-OS (12.1.0.34682)
Code Checker: PC-lint for C/C++ (NT) (9.00L)
Requirements Checker: RReqs (svn 23020)
C Standard: The C90 version of the C language is used with the GHS compiler.
Compiler defects: - refer to release note -
Compiler implementaton details: Refer to the GHS Compiler documentation for a full description of the C implementation-defined behavior.
Use of assembler: Inline assembler is used internally in the Os_GetSP(), os_trap() and Os_dbpush_rxx functions. Assembler code is used to support interrupts and exceptions. Stack manipulation for ECC tasks uses the assembler function Os_MoveSP(). The assembler functions Os_setjmp() and Os_longjmp() are used to support ECC tasks and running untrusted code.

Compiler(s): 
  Green Hills Software v2013.5.5 (P42): Ensure that ccrh850.exe is on the path and that the appropriate environment variables have been set.
  Green Hills Software v2015.1.7: Ensure that ccrh850.exe is on the path and that the appropriate environment variables have been set.
  Green Hills Software v2015.1.7 (P16): Ensure that ccrh850.exe is on the path and that the appropriate environment variables have been set.
  Green Hills Software v2017.1.5: Ensure that ccrh850.exe is on the path and that the appropriate environment variables have been set.
  Green Hills Software v2018.1.5: Ensure that ccrh850.exe is on the path and that the appropriate environment variables have been set.
  Green Hills Software FROZEN v2018.1.5: Ensure that ccrh850.exe is on the path and that the appropriate environment variables have been set.
  Green Hills Software v2019.1.5: Ensure that ccrh850.exe is on the path and that the appropriate environment variables have been set.
  Green Hills Software v2021.1.5: Ensure that ccrh850.exe is on the path and that the appropriate environment variables have been set.
  Green Hills Software v2021.1.5 Bosch Frozen P01: Ensure that ccrh850.exe is on the path and that the appropriate environment variables have been set.
  Green Hills Software v2022.1.4 Bosch Frozen P01: Ensure that ccrh850.exe is on the path and that the appropriate environment variables have been set.

Notes
=====

The MISRA deviations reported in the MISRA Deviations report are not considered to pose a risk to development as each deviation has been reviewed and subjected to suitable testing.
This means that RTA-OS library code featuring MISRA deviations does not require any mitigation actions to reduce development risk.
However user code which makes use of macros or RTA-OS API calls described in the RTA-OS header files Os.h should perform additional MISRA checking to assure the code is used correctly.
The locations in the MISRA Deviations report that result in code in Os.h are: Os_Safe_Cfg.h, OsMinusConfig.h, OsTrace.h, OsTargetTypes.h and Os_Cfg.h.
User code that includes target-specific header files such as Os_ConfigInterrupts.h or Os_DisableInterrupts.h that manipulate interrupt hardware should also be checked.

  

Compliance Matrix
=================

MISRA 2012 Dir 1.1
  Any implementation-defined behaviour on which the output of the program depends shall be documented and understood.
  Check: Review of Toolchain Report.

MISRA 2012 Dir 2.1
  All source files shall compile without any compilation errors
  Check: Compiler errors are detected in the RTA-OS build process via compiler exit status. These result in a build failure and no OS library gets generated.

MISRA 2012 Dir 3.1
  All code shall be traceable to documented requirements
  Check: The RTA-OS development process is fully requirements-driven. The RReqs tracing tool is used to ensure complete tracing from customer requirement to detailed target requirement, test and test result. Target ports only ship with 100% traced, tested and passing requirements.

MISRA 2012 Dir 4.1
  Run-time failures shall be minimized
  Check: Detailed testing.

MISRA 2012 Dir 4.2
  All usage of assembly language should be documented
  Check: Review of Toolchain Report.

MISRA 2012 Dir 4.3
  Assembly language shall be encapsulated and isolated
  Check: Review of Toolchain Report.

MISRA 2012 Dir 4.4
  Sections of code should not be {commented out}
  Check: Static analysis tool.

MISRA 2012 Dir 4.5
  Identifiers in the same name space with overlapping visibility should be typographically unambiguous
  Check: Code inspection.

MISRA 2012 Dir 4.6
  typedefs that indicate size and signedness should be used in place of the basic numerical types
  Check: Static analysis tool.

MISRA 2012 Dir 4.7
  If a function returns error information, then that error information shall be tested
  Check: Static analysis tool.

MISRA 2012 Dir 4.8
  If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden
  Check: Static analysis tool.

MISRA 2012 Dir 4.9
  A function should be used in preference to a function-like macro where they are interchangeable
  Check: Static analysis tool.

MISRA 2012 Dir 4.10
  Precautions shall be taken in order to prevent the contents of a header file being included more than once
  Check: Static analysis tool.

MISRA 2012 Dir 4.11
  The validity of values passed to library functions shall be checked
  Check: Code inspection.

MISRA 2012 Dir 4.12
  Dynamic memory allocation shall not be used
  Check: Code inspection.

MISRA 2012 Dir 4.13
  Functions which are designed to provide operations on a resource should be called in an appropriate sequence
  Check: Code inspection.

MISRA 2012 Dir 4.14
  The validity of values received from external sources shall be checked
  Check: Code inspection.

MISRA 2012 Dir 4.14
  The validity of values received from external sources shall be checked
  Check: Code inspection. OS does not deal with files, environment variables, user input or communications. In extended mode, all API inputs are checked for validity.

MISRA 2012 Rule 1.1 
  The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits
  Check: Static analysis tool / code inspection.

MISRA 2012 Rule 1.2 
  Language extensions should not be used
  Check: Static analysis tool

MISRA 2012 Rule 1.3 
  There shall be no occurrence of undefined or critical unspecified behaviour
  Check: Static analysis tool.

MISRA 2012 Rule 2.1 
  A project shall not contain unreachable code
  Check: Static analysis tool.

MISRA 2012 Rule 2.2 
  There shall be no dead code
  Check: Static analysis tool.

MISRA 2012 Rule 2.3 
  A project should not contain unused type declarations
  Check: Static analysis tool.

MISRA 2012 Rule 2.4 
  A project should not contain unused tag declarations
  Check: Static analysis tool.

MISRA 2012 Rule 2.5 
  A project should not contain unused macro declarations
  Check: Static analysis tool.

MISRA 2012 Rule 2.6 
  A function should not contain unused label declarations
  Check: Static analysis tool.

MISRA 2012 Rule 2.7 
  There should be no unused parameters in functions
  Check: Static analysis tool.

MISRA 2012 Rule 3.1 
  The character sequences /* and // shall not be used within a comment
  Check: Static analysis tool.

MISRA 2012 Rule 3.2 
  Line-splicing shall not be used in // comments
  Check: Static analysis tool.

MISRA 2012 Rule 4.1 
  Octal and hexadecimal escape sequences shall be terminated
  Check: Static analysis tool.

MISRA 2012 Rule 4.2 
  Trigraphs should not be used
  Check: Static analysis tool.

MISRA 2012 Rule 5.1 
  External identifiers shall be distinct
  Check: Static analysis tool.

MISRA 2012 Rule 5.2 
  Identifiers declared in the same scope and name space shall be distinct
  Check: Static analysis tool.

MISRA 2012 Rule 5.3 
  An identifier declared in an inner scope shall not hide an identifier declared in an outer scope
  Check: Static analysis tool.

MISRA 2012 Rule 5.4 
  Macro identifiers shall be distinct
  Check: Static analysis tool.

MISRA 2012 Rule 5.5 
  Identifiers shall be distinct from macro names
  Check: Static analysis tool.

MISRA 2012 Rule 5.6 
  A typedef name shall be a unique identifier
  Check: Static analysis tool.

MISRA 2012 Rule 5.7 
  A tag name shall be a unique identifier
  Check: Static analysis tool.

MISRA 2012 Rule 5.8 
  Identifiers that define objects or functions with external linkage shall be unique
  Check: Code inspection.

MISRA 2012 Rule 5.9 
  Identifiers that define objects or functions with internal linkage should be unique
  Check: Static analysis tool.

MISRA 2012 Rule 6.1 
  Bit-fields shall only be declared with an appropriate type
  Check: Static analysis tool.

MISRA 2012 Rule 6.2 
  Single-bit named bit fields shall not be of a signed type
  Check: Static analysis tool.

MISRA 2012 Rule 7.1 
  Octal constants shall not be used
  Check: Static analysis tool.

MISRA 2012 Rule 7.2 
  A {u} or {U} suffix shall be applied to all integer constants that are represented in an unsigned type
  Check: Static analysis tool.

MISRA 2012 Rule 7.3 
  The lowercase character {l} shall not be used in a literal suffix
  Check: Static analysis tool.

MISRA 2012 Rule 7.4 
  A string literal shall not be assigned to an object unless the object's type is {pointer to const-qualified char}
  Check: Static analysis tool.

MISRA 2012 Rule 8.1 
  Types shall be explicitly specified
  Check: Static analysis tool.

MISRA 2012 Rule 8.2 
  Function types shall be in prototype form with named parameters
  Check: Static analysis tool.

MISRA 2012 Rule 8.3 
  All declarations of an object or function shall use the same names and type qualifiers
  Check: Static analysis tool.

MISRA 2012 Rule 8.4 
  A compatible declaration shall be visible when an object or function with external linkage is defined
  Check: Static analysis tool.

MISRA 2012 Rule 8.5 
  An external object or function shall be declared once in one and only one file
  Check: Static analysis tool.

MISRA 2012 Rule 8.6 
  An identifier with external linkage shall have exactly one external definition
  Check: Static analysis tool.

MISRA 2012 Rule 8.7 
  Functions and objects should not be defined with external linkage if they are referenced in only one translation unit
  Check: Static analysis tool.

MISRA 2012 Rule 8.8 
  The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage
  Check: Static analysis tool.

MISRA 2012 Rule 8.9 
  An object should be defined at block scope if its identifier only appears in a single function
  Check: Static analysis tool.

MISRA 2012 Rule 8.10 
  An inline function shall be declared with the static storage class
  Check: Static analysis tool.

MISRA 2012 Rule 8.11 
  When an array with external linkage is declared, its size should be explicitly specified
  Check: Static analysis tool.

MISRA 2012 Rule 8.12 
  Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique
  Check: Static analysis tool.

MISRA 2012 Rule 8.13 
  A pointer should point to a const-qualified type whenever possible
  Check: Static analysis tool.

MISRA 2012 Rule 8.14 
  The restrict type qualifier shall not be used
  Check: Static analysis tool.

MISRA 2012 Rule 9.1 
  The value of an object with automatic storage duration shall not be read before it has been set
  Check: Static analysis tool.

MISRA 2012 Rule 9.2 
  The initializer for an aggregate or union shall be enclosed in braces
  Check: Static analysis tool.

MISRA 2012 Rule 9.3 
  Arrays shall not be partially initialized
  Check: Static analysis tool.

MISRA 2012 Rule 9.4 
  An element of an object shall not be initialized more than once
  Check: Static analysis tool.

MISRA 2012 Rule 9.5 
  Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly
  Check: Static analysis tool.

MISRA 2012 Rule 10.1 
  Operands shall not be of an inappropriate essential type
  Check: Static analysis tool.

MISRA 2012 Rule 10.2 
  Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations
  Check: Static analysis tool.

MISRA 2012 Rule 10.3 
  The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category
  Check: Static analysis tool.

MISRA 2012 Rule 10.4 
  Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category
  Check: Static analysis tool.

MISRA 2012 Rule 10.5 
  The value of an expression should not be cast to an inappropriate essential type
  Check: Static analysis tool.

MISRA 2012 Rule 10.6 
  The value of a composite expression shall not be assigned to an object with wider essential type
  Check: Static analysis tool.

MISRA 2012 Rule 10.7 
  If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type
  Check: Static analysis tool.

MISRA 2012 Rule 10.8 
  The value of a composite expression shall not be cast to a different essential type category or a wider essential type
  Check: Static analysis tool.

MISRA 2012 Rule 11.1 
  Conversions shall not be performed between a pointer to a function and any other type
  Check: Static analysis tool.

MISRA 2012 Rule 11.2 
  Conversions shall not be performed between a pointer to an incomplete type and any other type
  Check: Static analysis tool.

MISRA 2012 Rule 11.3 
  A cast shall not be performed between a pointer to object type and a pointer to a different object type
  Check: Static analysis tool.

MISRA 2012 Rule 11.4
  A conversion should not be performed between a pointer to object and an integer type
  Check: Static analysis tool.

MISRA 2012 Rule 11.5 
  A conversion should not be performed from pointer to void into pointer to object
  Check: Static analysis tool.

MISRA 2012 Rule 11.6 
  A cast shall not be performed between pointer to void and an arithmetic type
  Check: Static analysis tool.

MISRA 2012 Rule 11.7 
  A cast shall not be performed between pointer to object and a noninteger arithmetic type
  Check: Static analysis tool.

MISRA 2012 Rule 11.8 
  A cast shall not remove any const or volatile qualification from the type pointed to by a pointer
  Check: Static analysis tool.

MISRA 2012 Rule 11.9 
  The macro NULL shall be the only permitted form of integer null pointer constant
  Check: Static analysis tool.

MISRA 2012 Rule 12.1 
  The precedence of operators within expressions should be made explicit
  Check: Static analysis tool.

MISRA 2012 Rule 12.2 
  The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand
  Check: Static analysis tool.

MISRA 2012 Rule 12.3 
  The comma operator should not be used
  Check: Static analysis tool.

MISRA 2012 Rule 12.4 
  Evaluation of constant expressions should not lead to unsigned integer wrap-around
  Check: Static analysis tool.

MISRA 2012 Rule 12.5 
  The sizeof operator shall not have an operand which is a function parameter declared as array of type
  Check: Static analysis tool (PCLint Warning 682).

MISRA 2012 Rule 13.1 
  Initializer lists shall not contain persistent side effects
  Check: Static analysis tool.

MISRA 2012 Rule 13.2 
  The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders
  Check: Static analysis tool.

MISRA 2012 Rule 13.3 
  A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator
  Check: Static analysis tool.

MISRA 2012 Rule 13.4 
  The result of an assignment operator should not be used
  Check: Static analysis tool.

MISRA 2012 Rule 13.5 
  The right hand operand of a logical && or || operator shall not contain persistent side effects
  Check: Static analysis tool.

MISRA 2012 Rule 13.6 
  The operand of the sizeof operator shall not contain any expression which has potential side effects
  Check: Static analysis tool.

MISRA 2012 Rule 14.1 
  A loop counter shall not have essentially floating type
  Check: Static analysis tool.

MISRA 2012 Rule 14.2 
  A for loop shall be well-formed
  Check: Static analysis tool.

MISRA 2012 Rule 14.3 
  Controlling expressions shall not be invariant
  Check: Static analysis tool.

MISRA 2012 Rule 14.4 
  The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type
  Check: Static analysis tool.

MISRA 2012 Rule 15.1 
  The goto statement should not be used
  Check: Static analysis tool.

MISRA 2012 Rule 15.2 
  The goto statement shall jump to a label declared later in the same function
  Check: Static analysis tool.

MISRA 2012 Rule 15.3 
  Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement
  Check: Static analysis tool.

MISRA 2012 Rule 15.4 
  There should be no more than one break or goto statement used to terminate any iteration statement
  Check: Static analysis tool.

MISRA 2012 Rule 15.5 
  A function should have a single point of exit at the end
  Check: Static analysis tool.

MISRA 2012 Rule 15.6 
  The body of an iteration-statement or a selection-statement shall be a compound-statement
  Check: Static analysis tool.

MISRA 2012 Rule 15.7 
  All if … else if constructs shall be terminated with an else statement
  Check: Static analysis tool.

MISRA 2012 Rule 16.1 
  All switch statements shall be well-formed
  Check: Static analysis tool.

MISRA 2012 Rule 16.2 
  A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement
  Check: Static analysis tool.

MISRA 2012 Rule 16.3 
  An unconditional break statement shall terminate every switch-clause
  Check: Static analysis tool.

MISRA 2012 Rule 16.4 
  Every switch statement shall have a default label
  Check: Static analysis tool.

MISRA 2012 Rule 16.5 
  A default label shall appear as either the first or the last switch label of a switch statement
  Check: Static analysis tool.

MISRA 2012 Rule 16.6 
  Every switch statement shall have at least two switch-clauses
  Check: Static analysis tool.

MISRA 2012 Rule 16.7 
  A switch-expression shall not have essentially Boolean type
  Check: Static analysis tool.

MISRA 2012 Rule 17.1 
  The features of <stdarg.h> shall not be used
  Check: Static analysis tool.

MISRA 2012 Rule 17.2
  Functions shall not call themselves, either directly or indirectly
  Check: Static analysis tool.

MISRA 2012 Rule 17.3 
  A function shall not be declared implicitly
  Check: Static analysis tool.

MISRA 2012 Rule 17.4 
  All exit paths from a function with non-void return type shall have an explicit return statement with an expression
  Check: Static analysis tool.

MISRA 2012 Rule 17.5 
  The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements
  Check: Static analysis tool.

MISRA 2012 Rule 17.6 
  The declaration of an array parameter shall not contain the static keyword between the [ ]
  Check: Static analysis tool.

MISRA 2012 Rule 17.7 
  The value returned by a function having non-void return type shall be used
  Check: Static analysis tool.

MISRA 2012 Rule 17.8 
  A function parameter should not be modified
  Check: Static analysis tool.

MISRA 2012 Rule 18.1 
  A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand
  Check: Static analysis tool.

MISRA 2012 Rule 18.2 
  Subtraction between pointers shall only be applied to pointers that address elements of the same array
  Check: Static analysis tool.

MISRA 2012 Rule 18.3 
  The relational operators >, >=, < and <= shall not be applied to objects of pointer type except where they point into the same object
  Check: Static analysis tool.

MISRA 2012 Rule 18.4 
  The +, -, += and -= operators should not be applied to an expression of pointer type
  Check: Static analysis tool.

MISRA 2012 Rule 18.5 
  Declarations should contain no more than two levels of pointer nesting
  Check: Static analysis tool.

MISRA 2012 Rule 18.6 
  The address of an object with automatic storage shall not be copied to another object that persists after the first object has ceased to exist
  Check: Static analysis tool.

MISRA 2012 Rule 18.7 
  Flexible array members shall not be declared
  Check: Static analysis tool.

MISRA 2012 Rule 18.8 
  Variable-length array types shall not be used
  Check: Static analysis tool.

MISRA 2012 Rule 19.1 
  An object shall not be assigned or copied to an overlapping object
  Check: Code inspection.

MISRA 2012 Rule 19.2 
  The union keyword should not be used
  Check: Static analysis tool.

MISRA 2012 Rule 20.1 
  #include directives should only be preceded by preprocessor directives or comments
  Check: Static analysis tool.

MISRA 2012 Rule 20.2 
  The ', " or  characters and the /* or // character sequences shall not occur in a header file name
  Check: Static analysis tool.

MISRA 2012 Rule 20.3 
  The #include directive shall be followed by either a <filename> or "filename" sequence
  Check: Static analysis tool.

MISRA 2012 Rule 20.4 
  A macro shall not be defined with the same name as a keyword
  Check: Static analysis tool.

MISRA 2012 Rule 20.5 
  #undef should not be used
  Check: Static analysis tool.

MISRA 2012 Rule 20.6 
  Tokens that look like a preprocessing directive shall not occur within a macro argument
  Check: Static analysis tool.

MISRA 2012 Rule 20.7 
  Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses
  Check: Static analysis tool.

MISRA 2012 Rule 20.8 
  The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1
  Check: Static analysis tool.

MISRA 2012 Rule 20.9 
  All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation
  Check: Static analysis tool.

MISRA 2012 Rule 20.10 
  The # and ## preprocessor operators should not be used
  Check: Static analysis tool.

MISRA 2012 Rule 20.11 
  A macro parameter immediately following a # operator shall not immediately be followed by a ## operator
  Check: Static analysis tool.

MISRA 2012 Rule 20.12 
  A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators
  Check: Static analysis tool.

MISRA 2012 Rule 20.13 
  A line whose first token is # shall be a valid preprocessing directive
  Check: Static analysis tool.

MISRA 2012 Rule 20.14 
  All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related
  Check: Static analysis tool.

MISRA 2012 Rule 21.1 
  #define and #undef shall not be used on a reserved identifier or reserved macro name
  Check: Static analysis tool.

MISRA 2012 Rule 21.2 
  A reserved identifier or macro name shall not be declared
  Check: Static analysis tool.

MISRA 2012 Rule 21.3 
  The memory allocation and deallocation functions of <stdlib.h> shall not be used
  Check: Static analysis tool.

MISRA 2012 Rule 21.4 
  The standard header file <setjmp.h> shall not be used
  Check: Static analysis tool.

MISRA 2012 Rule 21.5 
  The standard header file <signal.h> shall not be used
  Check: Static analysis tool.

MISRA 2012 Rule 21.6 
  The Standard Library input/output functions shall not be used
  Check: Static analysis tool.

MISRA 2012 Rule 21.7 
  The atof, atoi, atol and atoll functions of <stdlib.h> shall not be used
  Check: Static analysis tool.

MISRA 2012 Rule 21.8 
  The library functions abort, exit and system of <stdlib.h> shall not be used
  Check: Static analysis tool.

MISRA 2012 Rule 21.9 
  The library functions bsearch and qsort of <stdlib.h> shall not be used
  Check: Static analysis tool.

MISRA 2012 Rule 21.10 
  The Standard Library time and date functions shall not be used
  Check: Static analysis tool.

MISRA 2012 Rule 21.11 
  The standard header file <tgmath.h> shall not be used
  Check: Static analysis tool.

MISRA 2012 Rule 21.12 
  The exception handling features of <fenv.h> should not be used
  Check: Static analysis tool.

MISRA 2012 Rule 21.13 
  Any value passed to a function in ctype.h shall be representable as an unsigned char or be the value EOF
  Check: Code inspection. ctype.h is not used in the OS.

MISRA 2012 Rule 21.14 
  The Standard Library function memcmp shall not be used to compare null terminated strings
  Check: Code inspection. memcmp is not used in the OS. Strings are not used in the OS.

MISRA 2012 Rule 21.15 
  The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types
  Check: Code inspection. memcpy, memmove and memcmp are not used in the OS.

MISRA 2012 Rule 21.16 
  The pointer arguments to the Standard Library function memcmp shall pointer to either a pointer type, an essentially signed type, an essentially unsigned type, and essentially Boolean type or an essentially enum type
  Check: Code inspection. memcmp is not used in the OS.

MISRA 2012 Rule 21.17 
  Use of the string handling functions from string.h shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters
  Check: Code inspection. string.h is not used in the OS. Strings are not used in the OS.

MISRA 2012 Rule 21.18 
  The size_t argument passed to any function in string.h shall have an appropriate value
  Check: Code inspection. string.h is not used in the OS.

MISRA 2012 Rule 21.19 
  The pointers returned by the standard library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to const-qualified type
  Check: Code inspection. The standard library is not used in the OS.

MISRA 2012 Rule 21.20 
  The pointer returned by the standard library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror shall not be used following a subsequent call to the same function
  Check: Code inspection. The standard library is not used in the OS.

MISRA 2012 Rule 22.1 
  All resources obtained dynamically by means of Standard Library functions shall be explicitly released
  Check: Static analysis tool.

MISRA 2012 Rule 22.2 
  A block of memory shall only be freed if it was allocated by means of a Standard Library function
  Check: Static analysis tool.

MISRA 2012 Rule 22.3 
  The same file shall not be open for read and write access at the same time on different streams
  Check: Code inspection (There are no File operations in AUTOSAR classic).

MISRA 2012 Rule 22.4 
  There shall be no attempt to write to a stream which has been opened as read-only
  Check: Code inspection (There are no File operations in AUTOSAR classic).

MISRA 2012 Rule 22.5 
  A pointer to a FILE object shall not be dereferenced
  Check: Code inspection (There are no File operations in AUTOSAR classic).

MISRA 2012 Rule 22.6 
  The value of a pointer to a FILE shall not be used after the associated stream has been closed
  Check: Code inspection (There are no File operations in AUTOSAR classic).

MISRA 2012 Rule 22.7 
  The macro EOF shall only be compared with the unmodified return value from any standard library function capable of returning EOF.
  Check: Code inspection. The standard library is not used in the OS.

MISRA 2012 Rule 22.8 
  The value of errno shall be set to zero prior to a call to an errno-setting-function
  Check: Code inspection. The standard library is not used in the OS.

MISRA 2012 Rule 22.9 
  The value of errno shall be tested against zero after calling an errno-setting-function.
  Check: Code inspection. The standard library is not used in the OS.

MISRA 2012 Rule 22.10 
  The value of errno shall only be tested when the last function to be called was an errno-setting-function
  Check: Code inspection. The standard library is not used in the OS.

Deviation Report
================

MISRA 2004 Rule 1.3
 
 Location  : OsTargetTypes.h
  Code     : /* Relates to CAT1_ISR macro */
  Rationale: Macro use reviewed and tested.

MISRA 2004 Rule 20.1000000000000
 
 Location  : OsTargetTypes.h
  Code     : /* Relates to CAT1_ISR macro */
  Rationale: Macro use reviewed and tested.

MISRA 2012 Dir 4.10
 Precautions shall be taken in order to prevent the contents of a header file being included more than once.
 Location  : IKernel.h (2 times)
  Code     : #define OS_START_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : IKernel.h (2 times)
  Code     : #define OS_STOP_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : IKernel.h (2 times)
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : IKernel.h (2 times)
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : IKernel.h (2 times)
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : IKernel.h (2 times)
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Safe_Cfg.h (2 times)
  Code     : #define OS_START_SEC_UNTRUSTEDAPPCORE0_LIB \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Safe_Cfg.h (2 times)
  Code     : #define OS_STOP_SEC_UNTRUSTEDAPPCORE0_LIB \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Safe_Cfg.h (2 times)
  Code     : #define OS_START_SEC_UNTRUSTEDAPPCORE1_LIB \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Safe_Cfg.h (2 times)
  Code     : #define OS_STOP_SEC_UNTRUSTEDAPPCORE1_LIB \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Safe_Cfg.h (2 times)
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Safe_Cfg.h (2 times)
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsMinusConfig.h
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsMinusConfig.h
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsMinusConfig.h (2 times)
  Code     : #define OS_START_SEC_CONST_CORE0_LOCAL \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsMinusConfig.h (2 times)
  Code     : #define OS_STOP_SEC_CONST_CORE0_LOCAL \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsMinusConfig.h (2 times)
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsMinusConfig.h (2 times)
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsMinusConfig.h (2 times)
  Code     : #define OS_START_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsMinusConfig.h (2 times)
  Code     : #define OS_STOP_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsMinusConfig.h (2 times)
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsMinusConfig.h (2 times)
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsMinusConfig.h (2 times)
  Code     : #define OS_START_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsMinusConfig.h (2 times)
  Code     : #define OS_STOP_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsMinusConfig.h (2 times)
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsMinusConfig.h (2 times)
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsTrace.h (2 times)
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsTrace.h (2 times)
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ITarget.h (2 times)
  Code     : #define OS_START_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ITarget.h (2 times)
  Code     : #define OS_STOP_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ITarget.h (3 times)
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ITarget.h (3 times)
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ITarget.h (2 times)
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ITarget.h (2 times)
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Target_Cfg.h (2 times)
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Target_Cfg.h (2 times)
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : fragments.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : fragments.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsTargetTypes.h (2 times)
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsTargetTypes.h (2 times)
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsTargetTypes.h (3 times)
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : OsTargetTypes.h (3 times)
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ActivateTask.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ActivateTask.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : AdvanceCounter.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : AdvanceCounter.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : AllowAccess.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : AllowAccess.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : CallTrustedFunction.c
  Code     : #define OS_START_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : CallTrustedFunction.c
  Code     : #define OS_STOP_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : CallTrustedFunction.c (2 times)
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : CallTrustedFunction.c (2 times)
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : CancelAlarm.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : CancelAlarm.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ChainTask.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ChainTask.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : CheckISRMemoryAccess.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : CheckISRMemoryAccess.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : CheckObjectAccess.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : CheckObjectAccess.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : CheckObjectOwnership.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : CheckObjectOwnership.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : CheckTaskMemoryAccess.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : CheckTaskMemoryAccess.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ClearEvent.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ClearEvent.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ControlIdle.c
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ControlIdle.c
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ControlIdle.c (2 times)
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ControlIdle.c (2 times)
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : DisableAllInterrupts.c
  Code     : #define OS_START_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : DisableAllInterrupts.c
  Code     : #define OS_STOP_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : DisableAllInterrupts.c
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : DisableAllInterrupts.c
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : DisableAllInterrupts.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : DisableAllInterrupts.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : DispatchTask.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : DispatchTask.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ElapsedTime.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ElapsedTime.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : EnableAllInterrupts.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : EnableAllInterrupts.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetActiveApplicationMode.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetActiveApplicationMode.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetAlarm.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetAlarm.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetAlarmBase.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetAlarmBase.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetApplicationID.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetApplicationID.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetApplicationState.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetApplicationState.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetCounterValue.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetCounterValue.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetCurrentApplicationID.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetCurrentApplicationID.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetElapsedCounterValue.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetElapsedCounterValue.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetEvent.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetEvent.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetExecutionTime.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetExecutionTime.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetISRID.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetISRID.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetIsrMaxExecutionTime.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetIsrMaxExecutionTime.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetIsrMaxStackUsage.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetIsrMaxStackUsage.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetResource.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetResource.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetScheduleTableStatus.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetScheduleTableStatus.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetStackSize.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetStackSize.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetStackUsage.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetStackUsage.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetStackValue.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetStackValue.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetTaskActivationTime.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetTaskActivationTime.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetTaskID.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetTaskID.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetTaskMaxExecutionTime.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetTaskMaxExecutionTime.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetTaskMaxStackUsage.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetTaskMaxStackUsage.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetTaskState.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetTaskState.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetVersionInfo.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : GetVersionInfo.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Idle.c
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Idle.c
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : IncrementCounter.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : IncrementCounter.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : InShutdown.c
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : InShutdown.c
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : InterruptSource.c
  Code     : #define OS_START_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : InterruptSource.c
  Code     : #define OS_STOP_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : InterruptSource.c (3 times)
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : InterruptSource.c (3 times)
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ModifyPeripheral.c (3 times)
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ModifyPeripheral.c (3 times)
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : NextScheduleTable.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : NextScheduleTable.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg.c
  Code     : #define OS_START_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg.c
  Code     : #define OS_STOP_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg.c (4 times)
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg.c (4 times)
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg.c (3 times)
  Code     : #define OS_START_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg.c (3 times)
  Code     : #define OS_STOP_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg.c
  Code     : #define OS_START_SEC_CONST_CORE0_LOCAL \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg.c
  Code     : #define OS_STOP_SEC_CONST_CORE0_LOCAL \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg.c
  Code     : #define OS_START_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg.c
  Code     : #define OS_STOP_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg_Counters.c
  Code     : #define OS_START_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg_Counters.c
  Code     : #define OS_STOP_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg_Counters.c
  Code     : #define OS_START_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg_Counters.c
  Code     : #define OS_STOP_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg_Counters.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg_Counters.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg_KL.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Cfg_KL.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_EnhancedIsolationCore.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_EnhancedIsolationCore.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_GetCurrentIMask.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_GetCurrentIMask.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_GetCurrentTPL.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_GetCurrentTPL.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Terminations.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Terminations.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ProtectionSupport.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ProtectionSupport.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ReadPeripheral.c (3 times)
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ReadPeripheral.c (3 times)
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ReleaseResource.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ReleaseResource.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ResetIsrMaxExecutionTime.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ResetIsrMaxExecutionTime.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ResetIsrMaxStackUsage.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ResetIsrMaxStackUsage.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ResetTaskMaxExecutionTime.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ResetTaskMaxExecutionTime.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ResetTaskMaxStackUsage.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ResetTaskMaxStackUsage.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ResumeAllInterrupts.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ResumeAllInterrupts.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ResumeOSInterrupts.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ResumeOSInterrupts.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Schedule.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Schedule.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SetAbsAlarm.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SetAbsAlarm.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SetEvent.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SetEvent.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SetRelAlarm.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SetRelAlarm.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SetScheduleTableAsync.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SetScheduleTableAsync.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ShutdownOS.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ShutdownOS.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : StackOverrunHook.c
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : StackOverrunHook.c
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : StartOS.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : StartOS.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : StartScheduleTableAbs.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : StartScheduleTableAbs.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : StartScheduleTableRel.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : StartScheduleTableRel.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : StartScheduleTableSynchron.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : StartScheduleTableSynchron.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : StopScheduleTable.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : StopScheduleTable.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SuspendAllInterrupts.c
  Code     : #define OS_START_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SuspendAllInterrupts.c
  Code     : #define OS_STOP_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SuspendAllInterrupts.c
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SuspendAllInterrupts.c
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SuspendAllInterrupts.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SuspendAllInterrupts.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SuspendOSInterrupts.c
  Code     : #define OS_START_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SuspendOSInterrupts.c
  Code     : #define OS_STOP_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SuspendOSInterrupts.c
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SuspendOSInterrupts.c
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SuspendOSInterrupts.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SuspendOSInterrupts.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SyncScheduleTable.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SyncScheduleTable.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SyncScheduleTableRel.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : SyncScheduleTableRel.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : TerminateTask.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : TerminateTask.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : TimeProtection.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : TimeProtection.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ValidateCounter.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ValidateCounter.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ValidateISR.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ValidateISR.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ValidateResource.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ValidateResource.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ValidateScheduleTable.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ValidateScheduleTable.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ValidateTask.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : ValidateTask.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : WaitEvent.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : WaitEvent.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : WritePeripheral.c (3 times)
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : WritePeripheral.c (3 times)
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_EnhancedIsolation.c
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_EnhancedIsolation.c
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_EnhancedIsolation.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_EnhancedIsolation.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_EnhancedIsolationStack.c
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_EnhancedIsolationStack.c
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_GetAbortStack.c
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_GetAbortStack.c
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_memclr.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_memclr.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Trust.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Trust.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_vec_init.c (2 times)
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_vec_init.c (2 times)
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_vec_init.c
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_vec_init.c
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_vec_init.c
  Code     : #define OS_START_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_vec_init.c
  Code     : #define OS_STOP_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Wrapper.c (2 times)
  Code     : #define OS_START_SEC_CODE_FAST \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.
 Location  : Os_Wrapper.c (2 times)
  Code     : #define OS_STOP_SEC_CODE_FAST \ #include "Os_MemMap.h"
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be included several times.

MISRA 2012 Dir 4.9
 A function should be used in preference to a function-like macro where they are interchangeable.
 Location  : IKernel.h
  Code     : Os_Call_StackOverrunHook, Os_Call_TimeOverrunHook
  Rationale: The function-like macros Os_Call_StackOverrunHook, Os_Call_TimeOverrunHook are used to inject code inline in a way that is portable across different compilers.
 Location  : Os_Safe_Cfg.h
  Code     : OS_TICKS2*
  Rationale: The function-like macro OS_TICKS2* is required by AUTOSAR to be a macro.
 Location  : OsMinusConfig.h
  Code     : OSMEMORY_IS_READABLE, OSMEMORY_IS_WRITEABLE, OSMEMORY_IS_EXECUTABLE, OSMEMORY_IS_...
  Rationale: The function-like macros OSMEMORY_IS_READABLE, OSMEMORY_IS_WRITEABLE, OSMEMORY_IS_EXECUTABLE, OSMEMORY_IS_STACKSPACE are specified by AUTOSAR.
 Location  : OsMinusConfig.h
  Code     : DeclareEvent
  Rationale: The function-like macro DeclareEvent is specified by AUTOSAR.
 Location  : OsMinusConfig.h
  Code     : OS_ISRTYPE_TO_INDEX
  Rationale: The function-like macro OS_ISRTYPE_TO_INDEX is used to return a compile-time constant value in the most efficient manner.
 Location  : OsMinusConfig.h
  Code     : OS_INDEX_TO_ISRTYPE
  Rationale: The function-like macro OS_INDEX_TO_ISRTYPE is used to return a compile-time constant value in the most efficient manner.
 Location  : OsMinusConfig.h
  Code     : ISR, DeclareISR
  Rationale: The function-like macros ISR, DeclareISR are specified by AUTOSAR.
 Location  : OsMinusConfig.h
  Code     : OS_TASKTYPE_TO_INDEX
  Rationale: The function-like macro OS_TASKTYPE_TO_INDEX is used to return a compile-time constant value in the most efficient manner.
 Location  : OsMinusConfig.h
  Code     : OS_INDEX_TO_TASKTYPE
  Rationale: The function-like macro OS_INDEX_TO_TASKTYPE is used to return a compile-time constant value in the most efficient manner.
 Location  : OsMinusConfig.h
  Code     : TASK, DeclareTask
  Rationale: The function-like macros TASK, DeclareTask are specified by AUTOSAR.
 Location  : OsMinusConfig.h
  Code     : DeclareResource
  Rationale: The function-like macro DeclareResource is specified by AUTOSAR.
 Location  : OsMinusConfig.h
  Code     : DeclareAlarm, ALARMCALLBACK
  Rationale: The function-like macros DeclareAlarm, ALARMCALLBACK are specified by AUTOSAR.
 Location  : OsMinusConfig.h
  Code     : DeclareCounter
  Rationale: The function-like macro DeclareCounter is specified by AUTOSAR.
 Location  : OsMinusConfig.h
  Code     : DeclareScheduleTable
  Rationale: The function-like macro DeclareScheduleTable is specified by AUTOSAR.
 Location  : OsMinusConfig.h
  Code     : OSError_*
  Rationale: The function-like macro OSError_* is specified by AUTOSAR.
 Location  : OsMinusConfig.h
  Code     : OSErrorGetServiceId
  Rationale: The function-like macro OSErrorGetServiceId is specified by AUTOSAR.
 Location  : OsMinusConfig.h
  Code     : Schedule
  Rationale: The function-like macro Schedule is used to inject code inline in a way that is portable across different compilers.
 Location  : OsMinusConfig.h
  Code     : ChainTask
  Rationale: The function-like macro ChainTask is used to inject code inline in a way that is portable across different compilers.
 Location  : OsMinusConfig.h
  Code     : CheckObjectOwnership, CheckObjectAccess
  Rationale: The function-like macros CheckObjectOwnership, CheckObjectAccess are wrappers that are used to enforce the parameter type-cast on to Os_AnyType without user-code having to do this itself.
 Location  : OsMinusConfig.h
  Code     : CallTrustedFunction
  Rationale: The function-like macro CallTrustedFunction is to add a default 3rd parameter to the underlying function.
 Location  : OsMinusConfig.h
  Code     : CheckTaskMemoryAccess, CheckISRMemoryAccess
  Rationale: The function-like macros CheckTaskMemoryAccess, CheckISRMemoryAccess are wrappers that are used to enforce the parameter type-cast on to MemoryStartAddressType without user-code having to do this itself.
 Location  : OsMinusConfig.h
  Code     : StartOS
  Rationale: The function-like macro StartOS is used to inject code inline in a way that is portable across different compilers.
 Location  : OsTrace.h
  Code     : OS_TRACE*, Os_Log*, Os_Set*, Os_Clear*, Os_Trigger*, OSTRACE_*
  Rationale: The function-like macros OS_TRACE*, Os_Log*, Os_Set*, Os_Clear*, Os_Trigger*, OSTRACE_* are used so that tracing code can be conditionally included.
 Location  : OsTrace.h
  Code     : Os_*Trace*, Os_*Trigger*
  Rationale: The function-like macros Os_*Trace*, Os_*Trigger* are used to stub out tracing code.
 Location  : fragments.c
  Code     : #define Os_trap()
  Rationale: These function-like macros are used for code portability. They can not be efficiently implemented as functions across all target ports.
 Location  : OsTargetTypes.h
  Code     : /* CAT1_ISR, OS_MAIN, OS_BARRIER, OS_CLR, OS_DBTAG, OS_DI, OS_EI, OS_LDL_W, \    ...
  Rationale: 'These function-like macros are used for code portability. They can not be efficiently implemented as functions across all target ports.
 Location  : OsTargetTypes.h
  Code     : /* OS_FETRAP_ENTRY, OS_FETRAP_LEAVE, OS_PRAGMA, OS_FETRAP_EXCEPTION */
  Rationale: These function-like macros are used for code portability. They can not be efficiently implemented as functions across all target ports.
 Location  : OsTargetTypes.h
  Code     : /* OS_LONGREG, OS_SHORTREG, OS_SBYTEREG */
  Rationale: These function-like macros are used for code portability. They can not be efficiently implemented as functions across all target ports.
 Location  : Os_Cfg.h
  Code     : OS_TPL_FOR_TASK, OS_IMASK_FOR_TASK
  Rationale: The function-like macros OS_TPL_FOR_TASK, OS_IMASK_FOR_TASK are part of the required API.
 Location  : Os_Cfg.h
  Code     : OS_IMASK_FOR_ISR
  Rationale: The function-like macro OS_IMASK_FOR_ISR is part of the required API.
 Location  : Os_Cfg.h
  Code     : LogTrace*, LogTaskTrace*, LogInterval*
  Rationale: The function-like macros LogTrace*, LogTaskTrace*, LogInterval* are used so that tracing code can be conditionally included.

MISRA 2012 Rule 1.3
 There shall be no occurrence of undefined or critical unspecified behaviour.
 Location  : Os_Cfg.h
  Code     : /* [MISRA 2012 Rule 20.10] */ /*lint -esym(9024, Os_LogCat1ISRStart) */ \ #define...
  Rationale: The Os_LogCat1ISRStart(x) needs to use ## twice: once to check validity, once to use value.
 Location  : Os_Cfg.h
  Code     : /* [MISRA 2012 Rule 20.10] */ /*lint -esym(9024, Os_LogCat1ISREnd) */ \ #define O...
  Rationale: The Os_LogCat1ISREnd(x) needs to use ## twice: once to check validity, once to use value.

MISRA 2012 Rule 11.1/11.3
 
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0100 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0104 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0108 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x010C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0110 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0114 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0118 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x011C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0120 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   &Os_shim_ISRSWINT0, /* source 0x0124 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0128 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x012C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0130 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0134 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   &Os_shim_ISRSTM04, /* source 0x0138 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   &Os_shim_ISRSTM05, /* source 0x013C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0140 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0144 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0148 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x014C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0150 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0154 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0158 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x015C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0160 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0164 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0168 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x016C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0170 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0174 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0178 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x017C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0180 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0184 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0188 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x018C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0190 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0194 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0198 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x019C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01A0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&ISRSTM06_SC4core0, /* source 0x01A4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&ISRSTM07_SC4core1, /* source 0x01A8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01AC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01B0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01B4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01B8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01BC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01C0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01C4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01C8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01CC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01D0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01D4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01D8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01DC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01E0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01E4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01E8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01EC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01F0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01F4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01F8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x01FC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0200 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0204 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0208 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x020C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0210 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0214 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0218 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x021C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0220 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0224 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0228 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x022C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0230 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0234 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0238 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x023C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0240 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0244 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0248 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x024C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0250 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0254 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0258 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x025C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0260 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0264 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0268 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x026C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0270 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0274 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0278 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x027C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0280 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0284 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0288 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x028C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0290 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0294 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   &Os_shim_ISRRLIN30STATUS, /* source 0x0298 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   &Os_shim_ISRRLIN30RX, /* source 0x029C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02A0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   &Os_shim_ISRRLIN31STATUS, /* source 0x02A4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   &Os_shim_ISRRLIN31RX, /* source 0x02A8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02AC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02B0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02B4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02B8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02BC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02C0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02C4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02C8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02CC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02D0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02D4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02D8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02DC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02E0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02E4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02E8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02EC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02F0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02F4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02F8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x02FC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0300 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0304 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0308 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x030C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0310 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0314 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0318 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x031C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0320 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0324 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0328 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x032C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0330 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0334 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0338 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x033C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0340 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0344 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0348 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x034C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0350 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0354 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0358 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x035C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0360 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0364 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0368 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x036C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0370 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0374 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0378 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x037C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0380 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0384 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0388 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x038C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0390 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0394 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0398 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x039C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03A0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03A4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03A8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03AC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   &Os_shim_ISRMTTCANI0, /* source 0x03B0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03B4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03B8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   &Os_shim_ISRMCAN0I0, /* source 0x03BC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03C0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03C4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   &Os_shim_ISRMCAN1I0, /* source 0x03C8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03CC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03D0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   &Os_shim_ISRMCAN2I0, /* source 0x03D4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03D8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03DC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03E0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03E4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   &Os_shim_ISRFLX0LINE0, /* source 0x03E8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03EC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03F0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03F4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03F8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x03FC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0400 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0404 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0408 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x040C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0410 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   &Os_shim_ISRFLX1LINE0, /* source 0x0414 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0418 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x041C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0420 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0424 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0428 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x042C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0430 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0434 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0438 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x043C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0440 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0444 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0448 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x044C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0450 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0454 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0458 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x045C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0460 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0464 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0468 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x046C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0470 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0474 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0478 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x047C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0480 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0484 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0488 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x048C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0490 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0494 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x0498 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x049C */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04A0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04A4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04A8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04AC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04B0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04B4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04B8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04BC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04C0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04C4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04C8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04CC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04D0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04D4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04D8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04DC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04E0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04E4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04E8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04EC */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04F0 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04F4 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04F8 */
  Rationale: Tests ensure that the ISR entry addresses are valid
 Location  : interrupt_config_common.rb
  Code     :   (Os_Cat2IsrEntryFunctionType)&InvalidInt, /* source 0x04FC */
  Rationale: Tests ensure that the ISR entry addresses are valid

MISRA 2012 Rule 11.3
 A cast shall not be performed between a pointer to object type and a pointer to a different object type.
 Location  : GetResource.c
  Code     : ResID->dynamic->locker = (INVALID_ISR != Os_RunningISR) ? (TaskType)Os_RunningISR...
  Rationale: This is an ORTI-related cast. The ORTI file contains a correct decoding of the locker.
 Location  : Os_Cfg.c
  Code     : Os_memclr((uint8 *)Os_dyn_tasks, sizeof(Os_dyn_tasks)/sizeof(uint8));
  Rationale: Os_dyn_tasks can be safely reduced to a uint8 pointer for use in Os_memclr.
 Location  : Os_Cfg.c
  Code     : Os_memclr((uint8 *)Os_dyn_isrs, sizeof(Os_dyn_isrs)/sizeof(uint8));
  Rationale: Os_dyn_isrs can be safely reduced to a uint8 pointer for use in Os_memclr.
 Location  : Os_Cfg.c
  Code     : Os_memclr((uint8 *)Os_dyn_resources, sizeof(Os_dyn_resources)/sizeof(uint8));
  Rationale: Os_dyn_resources can be safely reduced to a uint8 pointer for use in Os_memclr.
 Location  : Os_Cfg.c
  Code     : Os_memclr((uint8 *)Os_dyn_appstate, sizeof(Os_dyn_appstate)/sizeof(uint8));
  Rationale: Os_dyn_appstate can be safely reduced to a uint8 pointer for use in Os_memclr.
 Location  : Os_Cfg.c
  Code     : 
  Rationale: The Os_TraceAppendData() API serializes data. It takes account of alignment issues internally.
 Location  : Os_GetAbortStack.c
  Code     :   return (void *)Os_ApplicationContext.AlignedAddress;
  Rationale: Tests ensure that the pointers are handled correctly.

MISRA 2012 Rule 11.4
 A conversion should not be performed between a pointer to object and an integer type.
 Location  : InterruptSource.c
  Code     : ((Os_ISRSourceType)0xFFFFB174UL) /* Os_EIC186 */
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : InterruptSource.c
  Code     : ((Os_ISRSourceType)0xFFFFB18AUL) /* Os_EIC197 */
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : InterruptSource.c
  Code     : ((Os_ISRSourceType)0xFFFFB15EUL) /* Os_EIC175 */
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : InterruptSource.c
  Code     : ((Os_ISRSourceType)0xFFFFB164UL) /* Os_EIC178 */
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : InterruptSource.c
  Code     : ((Os_ISRSourceType)0xFFFFB16AUL) /* Os_EIC181 */
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : InterruptSource.c
  Code     : ((Os_ISRSourceType)0xFFFFB158UL) /* Os_EIC172 */
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : InterruptSource.c
  Code     : ((Os_ISRSourceType)0xFFFFB0CEUL) /* Os_EIC103 */
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : InterruptSource.c
  Code     : ((Os_ISRSourceType)0xFFFFB0CCUL) /* Os_EIC102 */
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : InterruptSource.c
  Code     : ((Os_ISRSourceType)0xFFFFB0D4UL) /* Os_EIC106 */
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : InterruptSource.c
  Code     : ((Os_ISRSourceType)0xFFFFB0D2UL) /* Os_EIC105 */
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : InterruptSource.c
  Code     : ((Os_ISRSourceType)0xFFFEEA1CUL) /* Os_EIC14 */
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : InterruptSource.c
  Code     : ((Os_ISRSourceType)0xFFFEEA1EUL) /* Os_EIC15 */
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : InterruptSource.c
  Code     : ((Os_ISRSourceType)0xFFFEEA12UL) /* Os_EIC9 */
  Rationale: Tests ensure that the pointers are handled correctly.

MISRA 2012 Rule 11.4/11.6
 A conversion should not be performed between a pointer to object and an integer type. A cast shall not be performed between pointer to void and an arithmetic type.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ActivateTask_TaskID() ((TaskType)(Os_ErrorInformation.service_par...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_AdvanceCounter_CounterID() ((CounterType)(Os_ErrorInformation....
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_CancelAlarm_AlarmID() ((AlarmType)(Os_ErrorInformation.service_pa...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_CallTrustedFunction_FunctionIndex() ((TrustedFunctionIndexType)(O...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_CallTrustedFunction_FunctionParams() ((TrustedFunctionParameterRe...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ChainTask_TaskID() ((TaskType)(Os_ErrorInformation.service_param1...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ClearEvent_Mask() ((EventMaskType)(Os_ErrorInformation.service_pa...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ControlIdle_CoreID() ((CoreIdType)(Os_ErrorInformation.service_pa...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ControlIdle_IdleMode() ((IdleModeType)(Os_ErrorInformation.servic...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetAlarm_AlarmID() ((AlarmType)(Os_ErrorInformation.service_param...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetAlarm_Tick() ((TickRefType)(Os_ErrorInformation.service_param2...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetAlarmBase_AlarmID() ((AlarmType)(Os_ErrorInformation.service_p...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetAlarmBase_Info() ((AlarmBaseRefType)(Os_ErrorInformation.servi...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetCounterValue_CounterID() ((CounterType)(Os_ErrorInformation.se...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetCounterValue_Value() ((TickRefType)(Os_ErrorInformation.servic...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetElapsedCounterValue_CounterID() ((CounterType)(Os_ErrorInforma...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetElapsedCounterValue_Value() ((TickRefType)(Os_ErrorInformation...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetElapsedCounterValue_ElapsedValue() ((TickRefType)(Os_ErrorInfo...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetEvent_TaskID() ((TaskType)(Os_ErrorInformation.service_param1)...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetEvent_Mask() ((EventMaskRefType)(Os_ErrorInformation.service_p...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetResource_ResID() ((ResourceType)(Os_ErrorInformation.service_p...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetScheduleTableStatus_ScheduleTableID() ((ScheduleTableType)(Os_...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetScheduleTableStatus_ScheduleStatus() ((ScheduleTableStatusRefT...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetTaskID_TaskID() ((TaskRefType)(Os_ErrorInformation.service_par...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetTaskState_TaskID() ((TaskType)(Os_ErrorInformation.service_par...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetTaskState_State() ((TaskStateRefType)(Os_ErrorInformation.serv...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_IncrementCounter_CounterID() ((CounterType)(Os_ErrorInformation.s...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_NextScheduleTable_ScheduleTableID_From() ((ScheduleTableType)(Os_...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_NextScheduleTable_ScheduleTableID_To() ((ScheduleTableType)(Os_Er...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_GetISRMaxExecutionTime_ISRID() ((ISRType)(Os_ErrorInformation....
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_GetTaskMaxExecutionTime_TaskID() ((TaskType)(Os_ErrorInformati...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_ResetISRMaxExecutionTime_ISRID() ((ISRType)(Os_ErrorInformatio...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_ResetTaskMaxExecutionTime_TaskID() ((TaskType)(Os_ErrorInforma...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_GetTaskElapsedTime_TaskID() ((TaskType)(Os_ErrorInformation.se...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_GetISRElapsedTime_ISRID() ((ISRType)(Os_ErrorInformation.servi...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_GetIdleElapsedTime_IdleID() ((Os_IdleType)(Os_ErrorInformation...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_ResetTaskElapsedTime_TaskID() ((TaskType)(Os_ErrorInformation....
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_ResetISRElapsedTime_ISRID() ((ISRType)(Os_ErrorInformation.ser...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_ResetIdleElapsedTime_IdleID() ((Os_IdleType)(Os_ErrorInformati...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_GetStackSize_Base() ((Os_StackValueType)(Os_ErrorInformation.s...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_GetStackSize_Sample() ((Os_StackValueType)(Os_ErrorInformation...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_GetISRMaxStackUsage_ISRID() ((ISRType)(Os_ErrorInformation.ser...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_GetTaskMaxStackUsage_TaskID() ((TaskType)(Os_ErrorInformation....
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_ResetISRMaxStackUsage_ISRID() ((ISRType)(Os_ErrorInformation.s...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_ResetTaskMaxStackUsage_TaskID() ((TaskType)(Os_ErrorInformatio...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ReleaseResource_ResID() ((ResourceType)(Os_ErrorInformation.servi...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_SetEvent_TaskID() ((TaskType)(Os_ErrorInformation.service_param1)...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_SetEvent_Mask() ((EventMaskType)(Os_ErrorInformation.service_para...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_SetAbsAlarm_AlarmID() ((AlarmType)(Os_ErrorInformation.service_pa...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_SetAbsAlarm_start() ((TickType)(Os_ErrorInformation.service_param...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_SetAbsAlarm_cycle() ((TickType)(Os_ErrorInformation.service_param...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_SetRelAlarm_AlarmID() ((AlarmType)(Os_ErrorInformation.service_pa...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_SetRelAlarm_increment() ((TickType)(Os_ErrorInformation.service_p...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_SetRelAlarm_cycle() ((TickType)(Os_ErrorInformation.service_param...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_StartScheduleTableAbs_ScheduleTableID() ((ScheduleTableType)(Os_E...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_StartScheduleTableAbs_Start() ((TickType)(Os_ErrorInformation.ser...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_StartScheduleTableRel_ScheduleTableID() ((ScheduleTableType)(Os_E...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_StartScheduleTableRel_Offset() ((TickType)(Os_ErrorInformation.se...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_StartScheduleTableSynchron_ScheduleTableID() ((ScheduleTableType)...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_SyncScheduleTable_ScheduleTableID() ((ScheduleTableType)(Os_Error...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_SyncScheduleTable_Value() ((TickType)(Os_ErrorInformation.service...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_SyncScheduleTableRel_ScheduleTableID() ((ScheduleTableType)(Os_Er...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_SyncScheduleTableRel_RelativeValue() ((SignedTickType)(Os_ErrorIn...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_SetScheduleTableAsync_ScheduleTableID() ((ScheduleTableType)(Os_E...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_StopScheduleTable_ScheduleTableID() ((ScheduleTableType)(Os_Error...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_WaitEvent_Mask() ((EventMaskType)(Os_ErrorInformation.service_par...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_EnableInterruptSource_ISRID() ((ISRType)(Os_ErrorInformation.serv...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_EnableInterruptSource_ClearPending() ((boolean)(Os_ErrorInformati...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_DisableInterruptSource_ISRID() ((ISRType)(Os_ErrorInformation.ser...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ClearPendingInterrupt_ISRID() ((ISRType)(Os_ErrorInformation.serv...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ModifyPeripheral32_Area() ((AreaIdType)(Os_ErrorInformation.servi...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ModifyPeripheral32_Address() ((Os_uint32RefType)(Os_ErrorInformat...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ReadPeripheral32_Area() ((AreaIdType)(Os_ErrorInformation.service...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ReadPeripheral32_Address() ((Os_uint32ConstRefType)(Os_ErrorInfor...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ReadPeripheral32_ReadValue() ((Os_uint32RefType)(Os_ErrorInformat...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_WritePeripheral32_Area() ((AreaIdType)(Os_ErrorInformation.servic...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_WritePeripheral32_Address() ((Os_uint32RefType)(Os_ErrorInformati...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_WritePeripheral32_WriteValue() ((uint32)(Os_ErrorInformation.serv...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ModifyPeripheral16_Area() ((AreaIdType)(Os_ErrorInformation.servi...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ModifyPeripheral16_Address() ((Os_uint16RefType)(Os_ErrorInformat...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ReadPeripheral16_Area() ((AreaIdType)(Os_ErrorInformation.service...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ReadPeripheral16_Address() ((Os_uint16ConstRefType)(Os_ErrorInfor...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ReadPeripheral16_ReadValue() ((Os_uint16RefType)(Os_ErrorInformat...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_WritePeripheral16_Area() ((AreaIdType)(Os_ErrorInformation.servic...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_WritePeripheral16_Address() ((Os_uint16RefType)(Os_ErrorInformati...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_WritePeripheral16_WriteValue() ((uint16)(Os_ErrorInformation.serv...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_GetTaskActivationTime_TaskID() ((TaskType)(Os_ErrorInformation...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_Os_GetTaskActivationTime_Value() ((Os_StopwatchTickRefType)(Os_Er...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ModifyPeripheral8_Area() ((AreaIdType)(Os_ErrorInformation.servic...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ModifyPeripheral8_Address() ((Os_uint8RefType)(Os_ErrorInformatio...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ReadPeripheral8_Area() ((AreaIdType)(Os_ErrorInformation.service_...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ReadPeripheral8_Address() ((Os_uint8ConstRefType)(Os_ErrorInforma...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_ReadPeripheral8_ReadValue() ((Os_uint8RefType)(Os_ErrorInformatio...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_WritePeripheral8_Area() ((AreaIdType)(Os_ErrorInformation.service...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_WritePeripheral8_Address() ((Os_uint8RefType)(Os_ErrorInformation...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_WritePeripheral8_WriteValue() ((uint8)(Os_ErrorInformation.servic...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetApplicationState_Application() ((ApplicationType)(Os_ErrorInfo...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : OsMinusConfig.h
  Code     : #define OSError_GetApplicationState_Value() ((ApplicationStateRefType)(Os_ErrorIn...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values from Os_BiggestType.
 Location  : ActivateTask.c
  Code     : Os_ErrorLog(api_retval, OSServiceId_ActivateTask, (Os_BiggestType)TaskID, (Os_Big...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values to Os_BiggestType.
 Location  : AllowAccess.c
  Code     : Os_ErrorLog(api_retval, OSServiceId_AllowAccess, (Os_BiggestType)0, (Os_BiggestTy...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values to Os_BiggestType.
 Location  : CallTrustedFunction.c
  Code     : Os_ErrorLog(api_retval, OSServiceId_CallTrustedFunction, (Os_BiggestType)Function...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values to Os_BiggestType.
 Location  : ChainTask.c
  Code     : Os_ErrorLog(api_retval, OSServiceId_ChainTask, (Os_BiggestType)TaskID, (Os_Bigges...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values to Os_BiggestType.
 Location  : GetApplicationState.c
  Code     : Os_ErrorLog(api_retval, OSServiceId_GetApplicationState, (Os_BiggestType)Applicat...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values to Os_BiggestType.
 Location  : Os_Cfg_KL.c
  Code     : , (Os_BiggestType)TaskID,(Os_BiggestType)0U,(Os_BiggestType)0U
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values to Os_BiggestType.
 Location  : SetScheduleTableAsync.c
  Code     : Os_ErrorLog(api_retval, OSServiceId_SetScheduleTableAsync, (Os_BiggestType)Schedu...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values to Os_BiggestType.
 Location  : StartScheduleTableSynchron.c
  Code     : Os_ErrorLog(api_retval, OSServiceId_StartScheduleTableSynchron, (Os_BiggestType)S...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values to Os_BiggestType.
 Location  : SyncScheduleTable.c
  Code     : Os_ErrorLog(api_retval, OSServiceId_SyncScheduleTable, (Os_BiggestType)ScheduleTa...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values to Os_BiggestType.
 Location  : SyncScheduleTableRel.c
  Code     : Os_ErrorLog(api_retval, OSServiceId_SyncScheduleTableRel, (Os_BiggestType)Schedul...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values to Os_BiggestType.
 Location  : TerminateTask.c
  Code     : Os_ErrorLog(api_retval, OSServiceId_TerminateTask, (Os_BiggestType)0, (Os_Biggest...
  Rationale: When ErrorLog is configured to record API values, it is necessary to cast all values to Os_BiggestType.
 Location  : Os_vec_init.c
  Code     :     OS_EIC102 = (uint16)(OS_EIC_EIMK | 0x0006U);
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : Os_vec_init.c
  Code     :     OS_EIC103 = (uint16)(OS_EIC_EIMK | 0x0006U);
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : Os_vec_init.c
  Code     :     OS_EIC105 = (uint16)(OS_EIC_EIMK | 0x0006U);
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : Os_vec_init.c
  Code     :     OS_EIC106 = (uint16)(OS_EIC_EIMK | 0x0006U);
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : Os_vec_init.c
  Code     :     OS_EIC14 = (uint16)(OS_EIC_EIMK | 0x0006U);
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : Os_vec_init.c
  Code     :     OS_EIC15 = (uint16)(OS_EIC_EIMK | 0x0006U);
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : Os_vec_init.c
  Code     :     OS_EIC172 = (uint16)(OS_EIC_EIMK | 0x0006U);
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : Os_vec_init.c
  Code     :     OS_EIC175 = (uint16)(OS_EIC_EIMK | 0x0006U);
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : Os_vec_init.c
  Code     :     OS_EIC178 = (uint16)(OS_EIC_EIMK | 0x0006U);
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : Os_vec_init.c
  Code     :     OS_EIC181 = (uint16)(OS_EIC_EIMK | 0x0006U);
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : Os_vec_init.c
  Code     :     OS_EIC186 = (uint16)(OS_EIC_EIMK | 0x0006U);
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : Os_vec_init.c
  Code     :     OS_EIC197 = (uint16)(OS_EIC_EIMK | 0x0006U);
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : Os_vec_init.c
  Code     :     OS_EIC41 = (uint16)(OS_EIC_EIMK | 0x0005U);
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : Os_vec_init.c
  Code     :     OS_EIC42 = (uint16)(OS_EIC_EIMK | 0x0005U);
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : Os_vec_init.c
  Code     :     OS_EIC9 = (uint16)(OS_EIC_EIMK | 0x0005U);
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : Os_vec_init.c
  Code     :   OS_LDSR(OS_EBASE, OS_SELID_1, (((0x0U)&0xFFFFFE00U) | OS_RINT));
  Rationale: Tests ensure that the pointers are handled correctly.

MISRA 2012 Rule 11.5
 A conversion should not be performed from pointer to void into pointer to object.
 Location  : CheckObjectAccess.c
  Code     : TaskType o = (TaskType)Object;
  Rationale: Pointer conversion forced by API.
 Location  : CheckObjectAccess.c
  Code     : ISRType o = (ISRType)Object;
  Rationale: Pointer conversion forced by API.
 Location  : CheckObjectAccess.c
  Code     : ResourceType o = (ResourceType)Object;
  Rationale: Pointer conversion forced by API.
 Location  : CheckObjectAccess.c
  Code     : CounterType o = (CounterType)Object;
  Rationale: Pointer conversion forced by API.
 Location  : CheckObjectAccess.c
  Code     : ScheduleTableType o = (ScheduleTableType)Object;
  Rationale: Pointer conversion forced by API.
 Location  : CheckObjectOwnership.c
  Code     : TaskType o = (TaskType)Object;
  Rationale: Pointer conversion forced by API.
 Location  : CheckObjectOwnership.c
  Code     : ISRType o = (ISRType)Object;
  Rationale: Pointer conversion forced by API.
 Location  : CheckObjectOwnership.c
  Code     : CounterType o = (CounterType)Object;
  Rationale: Pointer conversion forced by API.
 Location  : CheckObjectOwnership.c
  Code     : ScheduleTableType o = (ScheduleTableType)Object;
  Rationale: Pointer conversion forced by API.

MISRA 2012 Rule 15.1
 The goto statement should not be used.
 Location  : ActivateTask.c
  Code     : 
  Rationale: goto is used in ActivateTask for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : AdvanceCounter.c
  Code     : 
  Rationale: goto is used in AdvanceCounter for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : AllowAccess.c
  Code     : 
  Rationale: goto is used in AllowAccess for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : CallTrustedFunction.c
  Code     : 
  Rationale: goto is used in CallTrustedFunction for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : CancelAlarm.c
  Code     : 
  Rationale: goto is used in CancelAlarm for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ChainTask.c
  Code     : 
  Rationale: goto is used in ChainTask for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : CheckISRMemoryAccess.c
  Code     : 
  Rationale: goto is used in CheckISRMemoryAccess for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : CheckObjectAccess.c
  Code     : 
  Rationale: goto is used in CheckObjectAccess for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : CheckObjectOwnership.c
  Code     : 
  Rationale: goto is used in CheckObjectOwnership for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : CheckTaskMemoryAccess.c
  Code     : 
  Rationale: goto is used in CheckTaskMemoryAccess for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ClearEvent.c
  Code     : 
  Rationale: goto is used in ClearEvent for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ControlIdle.c
  Code     : 
  Rationale: goto is used in ControlIdle for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : DisableAllInterrupts.c
  Code     : 
  Rationale: goto is used in DisableAllInterrupts for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ElapsedTime.c
  Code     : 
  Rationale: goto is used in GetElapsedTime for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ElapsedTime.c
  Code     : 
  Rationale: goto is used in GetTaskElapsedTime for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ElapsedTime.c
  Code     : 
  Rationale: goto is used in ResetTaskElapsedTime for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ElapsedTime.c
  Code     : 
  Rationale: goto is used in GetISRElapsedTime for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ElapsedTime.c
  Code     : 
  Rationale: goto is used in ResetISRElapsedTime for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ElapsedTime.c
  Code     : 
  Rationale: goto is used in GetIdleElapsedTime for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ElapsedTime.c
  Code     : 
  Rationale: goto is used in ResetIdleElapsedTime for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : EnableAllInterrupts.c
  Code     : 
  Rationale: goto is used in EnableAllInterrupts for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetActiveApplicationMode.c
  Code     : 
  Rationale: goto is used in GetActiveApplicationMode for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetAlarm.c
  Code     : 
  Rationale: goto is used in GetAlarm for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetAlarmBase.c
  Code     : 
  Rationale: goto is used in GetAlarmBase for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetApplicationID.c
  Code     : 
  Rationale: goto is used in GetApplicationID for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetApplicationState.c
  Code     : 
  Rationale: goto is used in GetApplicationState for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetCounterValue.c
  Code     : 
  Rationale: goto is used in GetCounterValue for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetCurrentApplicationID.c
  Code     : 
  Rationale: goto is used in GetCurrentApplicationID for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetElapsedCounterValue.c
  Code     : 
  Rationale: goto is used in GetElapsedCounterValue for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetEvent.c
  Code     : 
  Rationale: goto is used in GetEvent for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetExecutionTime.c
  Code     : 
  Rationale: goto is used in GetExecutionTime for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetISRID.c
  Code     : 
  Rationale: goto is used in GetISRID for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetIsrMaxExecutionTime.c
  Code     : 
  Rationale: goto is used in GetISRMaxExecutionTime for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetIsrMaxStackUsage.c
  Code     : 
  Rationale: goto is used in GetISRMaxStackUsage for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetResource.c
  Code     : 
  Rationale: goto is used in GetResource for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetScheduleTableStatus.c
  Code     : 
  Rationale: goto is used in GetScheduleTableStatus for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetStackSize.c
  Code     : 
  Rationale: goto is used in GetStackSize for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetStackUsage.c
  Code     : 
  Rationale: goto is used in GetStackUsage for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetStackValue.c
  Code     : 
  Rationale: goto is used in GetStackValue for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetTaskActivationTime.c
  Code     : 
  Rationale: goto is used in GetTaskActivationTime for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetTaskID.c
  Code     : 
  Rationale: goto is used in GetTaskID for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetTaskMaxExecutionTime.c
  Code     : 
  Rationale: goto is used in GetTaskMaxExecutionTime for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetTaskMaxStackUsage.c
  Code     : 
  Rationale: goto is used in GetTaskMaxStackUsage for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetTaskState.c
  Code     : 
  Rationale: goto is used in GetTaskState for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : GetVersionInfo.c
  Code     : 
  Rationale: goto is used in GetVersionInfo for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : IncrementCounter.c
  Code     : 
  Rationale: goto is used in IncrementCounter for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : InterruptSource.c
  Code     : 
  Rationale: goto is used in EnableInterruptSource for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : InterruptSource.c
  Code     : 
  Rationale: goto is used in DisableInterruptSource for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : InterruptSource.c
  Code     : 
  Rationale: goto is used in ClearPendingInterrupt for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ModifyPeripheral.c
  Code     : 
  Rationale: goto is used in ModifyPeripheral8 for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ModifyPeripheral.c
  Code     : 
  Rationale: goto is used in ModifyPeripheral16 for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ModifyPeripheral.c
  Code     : 
  Rationale: goto is used in ModifyPeripheral32 for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : NextScheduleTable.c
  Code     : 
  Rationale: goto is used in NextScheduleTable for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : Os_GetCurrentIMask.c
  Code     : 
  Rationale: goto is used in GetCurrentIMask for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : Os_GetCurrentTPL.c
  Code     : 
  Rationale: goto is used in GetCurrentTPL for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ReadPeripheral.c
  Code     : 
  Rationale: goto is used in ReadPeripheral8 for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ReadPeripheral.c
  Code     : 
  Rationale: goto is used in ReadPeripheral16 for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ReadPeripheral.c
  Code     : 
  Rationale: goto is used in ReadPeripheral32 for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ReleaseResource.c
  Code     : 
  Rationale: goto is used in ReleaseResource for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ResetIsrMaxExecutionTime.c
  Code     : 
  Rationale: goto is used in ResetISRMaxExecutionTime for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ResetIsrMaxStackUsage.c
  Code     : 
  Rationale: goto is used in ResetISRMaxStackUsage for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ResetTaskMaxExecutionTime.c
  Code     : 
  Rationale: goto is used in ResetTaskMaxExecutionTime for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ResetTaskMaxStackUsage.c
  Code     : 
  Rationale: goto is used in ResetTaskMaxStackUsage for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ResumeAllInterrupts.c
  Code     : 
  Rationale: goto is used in ResumeAllInterrupts for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ResumeOSInterrupts.c
  Code     : 
  Rationale: goto is used in ResumeOSInterrupts for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : Schedule.c
  Code     : 
  Rationale: goto is used in Schedule for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : SetAbsAlarm.c
  Code     : 
  Rationale: goto is used in SetAbsAlarm for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : SetEvent.c
  Code     : 
  Rationale: goto is used in SetEvent for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : SetRelAlarm.c
  Code     : 
  Rationale: goto is used in SetRelAlarm for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : SetScheduleTableAsync.c
  Code     : 
  Rationale: goto is used in SetScheduleTableAsync for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : ShutdownOS.c
  Code     : 
  Rationale: goto is used in ShutdownOS for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : StartOS.c
  Code     : 
  Rationale: goto is used in StartOS for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : StartScheduleTableAbs.c
  Code     : 
  Rationale: goto is used in StartScheduleTableAbs for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : StartScheduleTableRel.c
  Code     : 
  Rationale: goto is used in StartScheduleTableRel for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : StartScheduleTableSynchron.c
  Code     : 
  Rationale: goto is used in StartScheduleTableSynchron for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : StopScheduleTable.c
  Code     : 
  Rationale: goto is used in StopScheduleTable for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : SuspendAllInterrupts.c
  Code     : 
  Rationale: goto is used in SuspendAllInterrupts for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : SuspendOSInterrupts.c
  Code     : 
  Rationale: goto is used in SuspendOSInterrupts for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : SyncScheduleTable.c
  Code     : 
  Rationale: goto is used in SyncScheduleTable for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : SyncScheduleTableRel.c
  Code     : 
  Rationale: goto is used in SyncScheduleTableRel for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : TerminateTask.c (2 times)
  Code     : 
  Rationale: goto is used in TerminateTask for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : WaitEvent.c
  Code     : 
  Rationale: goto is used in WaitEvent for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : WritePeripheral.c
  Code     : 
  Rationale: goto is used in WritePeripheral8 for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : WritePeripheral.c
  Code     : 
  Rationale: goto is used in WritePeripheral16 for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.
 Location  : WritePeripheral.c
  Code     : 
  Rationale: goto is used in WritePeripheral32 for reasons of code efficiency across different targets. It is used in a structured manner, solely for error handling.

MISRA 2012 Rule 15.5
 A function should have a single point of exit at the end.
 Location  : Os_Cfg_KL.c
  Code     : return;
  Rationale: Code has to exit early in error case
 Location  : StartOS.c (2 times)
  Code     : return FALSE;
  Rationale: Code has to exit early in error case

MISRA 2012 Rule 16.1
 All switch statements shall be well-formed.
 Location  : ActivateTask.c
  Code     : if (TaskID->dynamic->activation_count == TaskID->activation_count) { api_retval =...
  Rationale: Error condition requires an early and unusual exit from switch.
 Location  : ChainTask.c
  Code     : if (TaskID->dynamic->activation_count == TaskID->activation_count) { api_retval =...
  Rationale: Error condition forces early exit from switch

MISRA 2012 Rule 18.3
 The relational operators >, >=, < and <= shall not be applied to objects of pointer type except where they point into the same object.
 Location  : CallTrustedFunction.c
  Code     : Os_untrusted_function_alignment_handler(OS_PTRDIFF(Os_ApplicationContext.AlignedA...
  Rationale: Tests ensure that the pointers are handled correctly.
 Location  : InterruptSource.c (3 times)
  Code     : const Os_ISRSourceType *source_info = &Os_const_isr_sourcemap[OS_ISRTYPE_TO_INDEX...
  Rationale: OS_ISRTYPE_TO_INDEX uses pointer subtraction between same types to the ISR index. This is portable.

MISRA 2012 Rule 19.2
 The union keyword should not be used.
 Location  : Os.h
  Code     : union {} Os_psetType;
  Rationale: The Os_psetType union is used to save memory. Different cores can have different pset sizes, but each TASK only needs to use the pset of the core it belongs to.
 Location  : Os.h
  Code     : union {} Os_tpmaskType;
  Rationale: The Os_tpmaskType union is used to save memory. Different cores can have different pset sizes, but each core only uses its own type.
 Location  : Os.h
  Code     : union {} saved_priority;
  Rationale: The saved_priority union is used to save memory. Depending on the configuration, this contains a task or interrupt priority
 Location  : Os.h
  Code     : union {} type_dependent;
  Rationale: The type_dependent union in Os_CounterDynType is used to save memory. Depending on the configuration, this contains data about a hardware or software counter

MISRA 2012 Rule 20.1
 #include directives should only be preceded by preprocessor directives or comments.
 Location  : IKernel.h
  Code     : #define OS_START_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : IKernel.h
  Code     : #define OS_STOP_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : IKernel.h
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : IKernel.h
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : IKernel.h
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : IKernel.h
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : IKernel.h
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : IKernel.h
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : IKernel.h
  Code     : #define OS_START_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : IKernel.h
  Code     : #define OS_STOP_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : IKernel.h
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : IKernel.h
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Safe_Cfg.h
  Code     : #define OS_START_SEC_UNTRUSTEDAPPCORE0_LIB \ #include "Os_MemMap.h" /* [MISRA 201...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Safe_Cfg.h
  Code     : #define OS_STOP_SEC_UNTRUSTEDAPPCORE0_LIB \ #include "Os_MemMap.h" /* [MISRA 2012...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Safe_Cfg.h
  Code     : #define OS_START_SEC_UNTRUSTEDAPPCORE1_LIB \ #include "Os_MemMap.h" /* [MISRA 201...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Safe_Cfg.h
  Code     : #define OS_STOP_SEC_UNTRUSTEDAPPCORE1_LIB \ #include "Os_MemMap.h" /* [MISRA 2012...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Safe_Cfg.h
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Safe_Cfg.h
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Safe_Cfg.h
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Safe_Cfg.h
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Safe_Cfg.h
  Code     : #define OS_START_SEC_UNTRUSTEDAPPCORE0_LIB \ #include "Os_MemMap.h" /* [MISRA 201...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Safe_Cfg.h
  Code     : #define OS_STOP_SEC_UNTRUSTEDAPPCORE0_LIB \ #include "Os_MemMap.h" /* [MISRA 2012...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Safe_Cfg.h
  Code     : #define OS_START_SEC_UNTRUSTEDAPPCORE1_LIB \ #include "Os_MemMap.h" /* [MISRA 201...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Safe_Cfg.h
  Code     : #define OS_STOP_SEC_UNTRUSTEDAPPCORE1_LIB \ #include "Os_MemMap.h" /* [MISRA 2012...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_START_SEC_CONST_CORE0_LOCAL \ #include "Os_MemMap.h" /* [MISRA 2012 Di...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_STOP_SEC_CONST_CORE0_LOCAL \ #include "Os_MemMap.h" /* [MISRA 2012 Dir...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.1...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_START_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_STOP_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_START_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_STOP_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 201...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.1...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_START_SEC_CONST_CORE0_LOCAL \ #include "Os_MemMap.h" /* [MISRA 2012 Di...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_STOP_SEC_CONST_CORE0_LOCAL \ #include "Os_MemMap.h" /* [MISRA 2012 Dir...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_START_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_STOP_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 201...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_START_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_STOP_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsMinusConfig.h
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsTrace.h
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.1...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsTrace.h
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsTrace.h
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.1...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsTrace.h
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ITarget.h
  Code     : #define OS_START_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2012 Di...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ITarget.h
  Code     : #define OS_STOP_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2012 Dir...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ITarget.h
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.1...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ITarget.h
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ITarget.h
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.1...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ITarget.h
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ITarget.h
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ITarget.h
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ITarget.h
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.1...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ITarget.h
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ITarget.h
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ITarget.h
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ITarget.h
  Code     : #define OS_START_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2012 Di...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ITarget.h
  Code     : #define OS_STOP_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2012 Dir...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Target_Cfg.h
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Target_Cfg.h
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Target_Cfg.h
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Target_Cfg.h
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : fragments.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : fragments.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsTargetTypes.h
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsTargetTypes.h
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsTargetTypes.h
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsTargetTypes.h
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsTargetTypes.h
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsTargetTypes.h
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsTargetTypes.h
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsTargetTypes.h
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsTargetTypes.h
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : OsTargetTypes.h
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ActivateTask.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ActivateTask.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : AdvanceCounter.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : AdvanceCounter.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : AllowAccess.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : AllowAccess.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : CallTrustedFunction.c
  Code     : #define OS_START_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2012 Di...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : CallTrustedFunction.c
  Code     : #define OS_STOP_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2012 Dir...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : CallTrustedFunction.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : CallTrustedFunction.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : CallTrustedFunction.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : CallTrustedFunction.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : CancelAlarm.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : CancelAlarm.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ChainTask.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ChainTask.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : CheckISRMemoryAccess.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : CheckISRMemoryAccess.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : CheckObjectAccess.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : CheckObjectAccess.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : CheckObjectOwnership.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : CheckObjectOwnership.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : CheckTaskMemoryAccess.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : CheckTaskMemoryAccess.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ClearEvent.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ClearEvent.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ControlIdle.c
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ControlIdle.c
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ControlIdle.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ControlIdle.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ControlIdle.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ControlIdle.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : DisableAllInterrupts.c
  Code     : #define OS_START_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : DisableAllInterrupts.c
  Code     : #define OS_STOP_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : DisableAllInterrupts.c
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : DisableAllInterrupts.c
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : DisableAllInterrupts.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : DisableAllInterrupts.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : DispatchTask.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : DispatchTask.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ElapsedTime.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ElapsedTime.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : EnableAllInterrupts.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : EnableAllInterrupts.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetActiveApplicationMode.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetActiveApplicationMode.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetAlarm.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetAlarm.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetAlarmBase.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetAlarmBase.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetApplicationID.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetApplicationID.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetApplicationState.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetApplicationState.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetCounterValue.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetCounterValue.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetCurrentApplicationID.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetCurrentApplicationID.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetElapsedCounterValue.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetElapsedCounterValue.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetEvent.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetEvent.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetExecutionTime.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetExecutionTime.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetISRID.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetISRID.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetIsrMaxExecutionTime.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetIsrMaxExecutionTime.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetIsrMaxStackUsage.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetIsrMaxStackUsage.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetResource.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetResource.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetScheduleTableStatus.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetScheduleTableStatus.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetStackSize.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetStackSize.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetStackUsage.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetStackUsage.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetStackValue.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetStackValue.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetTaskActivationTime.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetTaskActivationTime.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetTaskID.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetTaskID.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetTaskMaxExecutionTime.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetTaskMaxExecutionTime.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetTaskMaxStackUsage.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetTaskMaxStackUsage.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetTaskState.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetTaskState.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetVersionInfo.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : GetVersionInfo.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Idle.c
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.1...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Idle.c
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : IncrementCounter.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : IncrementCounter.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : InShutdown.c
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.1...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : InShutdown.c
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : InterruptSource.c
  Code     : #define OS_START_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2012 Di...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : InterruptSource.c
  Code     : #define OS_STOP_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2012 Dir...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : InterruptSource.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : InterruptSource.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : InterruptSource.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : InterruptSource.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : InterruptSource.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : InterruptSource.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ModifyPeripheral.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ModifyPeripheral.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ModifyPeripheral.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ModifyPeripheral.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ModifyPeripheral.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ModifyPeripheral.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : NextScheduleTable.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : NextScheduleTable.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_START_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_STOP_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_START_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_STOP_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 201...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_START_SEC_CONST_CORE0_LOCAL \ #include "Os_MemMap.h" /* [MISRA 2012 Di...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_STOP_SEC_CONST_CORE0_LOCAL \ #include "Os_MemMap.h" /* [MISRA 2012 Dir...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_START_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_STOP_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 201...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_START_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_STOP_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 201...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_START_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2012 Di...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_STOP_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2012 Dir...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg_Counters.c
  Code     : #define OS_START_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg_Counters.c
  Code     : #define OS_STOP_SEC_CONST_FAST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 201...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg_Counters.c
  Code     : #define OS_START_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2012 Di...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg_Counters.c
  Code     : #define OS_STOP_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2012 Dir...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg_Counters.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg_Counters.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg_KL.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Cfg_KL.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_EnhancedIsolationCore.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_EnhancedIsolationCore.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_GetCurrentIMask.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_GetCurrentIMask.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_GetCurrentTPL.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_GetCurrentTPL.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Terminations.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Terminations.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ProtectionSupport.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ProtectionSupport.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ReadPeripheral.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ReadPeripheral.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ReadPeripheral.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ReadPeripheral.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ReadPeripheral.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ReadPeripheral.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ReleaseResource.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ReleaseResource.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ResetIsrMaxExecutionTime.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ResetIsrMaxExecutionTime.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ResetIsrMaxStackUsage.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ResetIsrMaxStackUsage.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ResetTaskMaxExecutionTime.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ResetTaskMaxExecutionTime.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ResetTaskMaxStackUsage.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ResetTaskMaxStackUsage.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ResumeAllInterrupts.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ResumeAllInterrupts.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ResumeOSInterrupts.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ResumeOSInterrupts.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Schedule.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Schedule.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SetAbsAlarm.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SetAbsAlarm.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SetEvent.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SetEvent.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SetRelAlarm.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SetRelAlarm.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SetScheduleTableAsync.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SetScheduleTableAsync.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ShutdownOS.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ShutdownOS.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : StackOverrunHook.c
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.1...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : StackOverrunHook.c
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : StartOS.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : StartOS.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : StartScheduleTableAbs.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : StartScheduleTableAbs.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : StartScheduleTableRel.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : StartScheduleTableRel.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : StartScheduleTableSynchron.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : StartScheduleTableSynchron.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : StopScheduleTable.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : StopScheduleTable.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SuspendAllInterrupts.c
  Code     : #define OS_START_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SuspendAllInterrupts.c
  Code     : #define OS_STOP_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SuspendAllInterrupts.c
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SuspendAllInterrupts.c
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SuspendAllInterrupts.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SuspendAllInterrupts.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SuspendOSInterrupts.c
  Code     : #define OS_START_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SuspendOSInterrupts.c
  Code     : #define OS_STOP_SEC_VAR_CLEARED_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SuspendOSInterrupts.c
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SuspendOSInterrupts.c
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SuspendOSInterrupts.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SuspendOSInterrupts.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SyncScheduleTable.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SyncScheduleTable.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SyncScheduleTableRel.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : SyncScheduleTableRel.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : TerminateTask.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : TerminateTask.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : TimeProtection.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : TimeProtection.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ValidateCounter.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ValidateCounter.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ValidateISR.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ValidateISR.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ValidateResource.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ValidateResource.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ValidateScheduleTable.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ValidateScheduleTable.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ValidateTask.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : ValidateTask.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : WaitEvent.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : WaitEvent.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : WritePeripheral.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : WritePeripheral.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : WritePeripheral.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : WritePeripheral.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : WritePeripheral.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : WritePeripheral.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_EnhancedIsolation.c
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_EnhancedIsolation.c
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_EnhancedIsolation.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_EnhancedIsolation.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_EnhancedIsolationStack.c
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.1...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_EnhancedIsolationStack.c
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_GetAbortStack.c
  Code     : #define OS_START_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.1...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_GetAbortStack.c
  Code     : #define OS_STOP_SEC_CALLOUT_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_memclr.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_memclr.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Trust.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Trust.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_vec_init.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_vec_init.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_vec_init.c
  Code     : #define OS_START_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_vec_init.c
  Code     : #define OS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 20...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_vec_init.c
  Code     : #define OS_START_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_vec_init.c
  Code     : #define OS_STOP_SEC_CODE \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] */ /*l...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_vec_init.c
  Code     : #define OS_START_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2012 Di...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_vec_init.c
  Code     : #define OS_STOP_SEC_CONST_UNSPECIFIED \ #include "Os_MemMap.h" /* [MISRA 2012 Dir...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Wrapper.c
  Code     : #define OS_START_SEC_CODE_FAST \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] ...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Wrapper.c
  Code     : #define OS_STOP_SEC_CODE_FAST \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] *...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Wrapper.c
  Code     : #define OS_START_SEC_CODE_FAST \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] ...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.
 Location  : Os_Wrapper.c
  Code     : #define OS_STOP_SEC_CODE_FAST \ #include "Os_MemMap.h" /* [MISRA 2012 Dir 4.10] *...
  Rationale: "Os_MemMap.h" is an AUTOSAR file that is intended to be used in this way.

MISRA 2012 Rule 20.10
 The # and ## preprocessor operators should not be used.
 Location  : Os.h
  Code     : #define ISR(x) void Os_Entry_##x(void) /* [$UKS 106] [$UKS 98] */
  Rationale: The ISR(x) macro uses ## to construct a name for the ISR code body. This usage does not rely on a specific order of evaluation, so its use is acceptable.
 Location  : Os.h
  Code     : #define TASK(x) void Os_Entry_##x(void) /* [$UKS 50] */
  Rationale: The TASK(x) macro uses ## to construct a name for the TASK code body. This usage does not rely on a specific order of evaluation, so its use is acceptable.
 Location  : Os.h
  Code     : #define ALARMCALLBACK(x) FUNC(void, OS_CODE) Os_Cbk_Alarm_##x(void) /* [$UKS 274]...
  Rationale: The ALARMCALLBACK(x) macro uses ## to construct a name for the callback body. This usage does not rely on a specific order of evaluation, so its use is acceptable.
 Location  : OsTrace.h
  Code     : #define Os_TriggerOnCat1ISRStart(x)    Os_SetTriggerConditions(OS_TRACE_TASKSTART...
  Rationale: The Os_TriggerOnCat1ISRStart(x) macro uses ## to construct a trace ID for the ISR. This usage does not rely on a specific order of evaluation, so its use is acceptable.
 Location  : OsTrace.h
  Code     : #define Os_TriggerOnCat1ISRStop(x)     Os_SetTriggerConditions(OS_TRACE_TASKEND, ...
  Rationale: The Os_TriggerOnCat1ISRStop(x) macro uses ## to construct a trace ID for the ISR. This usage does not rely on a specific order of evaluation, so its use is acceptable.
 Location  : OsTrace.h
  Code     : #define Os_TriggerOnAlarmExpiry(x)     Os_SetTriggerConditions(OS_TRACE_ALARM_EXP...
  Rationale: The Os_TriggerOnAlarmExpiry(x) macro uses ## to construct a trace ID for the ISR. This usage does not rely on a specific order of evaluation, so its use is acceptable.
 Location  : OsTrace.h
  Code     : #define Os_TriggerOnScheduleTableExpiry(x) Os_SetTriggerConditions(OS_TRACE_ALARM...
  Rationale: The Os_TriggerOnScheduleTableExpiry(x) macro uses ## to construct a trace ID for the ISR. This usage does not rely on a specific order of evaluation, so its use is acceptable.
 Location  : OsTrace.h
  Code     : #define Os_TriggerOnIncrementCounter(x) Os_SetTriggerConditions(OS_TRACE_TICK_COU...
  Rationale: The Os_TriggerOnIncrementCounter(x) macro uses ## to construct a trace ID for the ISR. This usage does not rely on a specific order of evaluation, so its use is acceptable.
 Location  : OsTrace.h
  Code     : #define Os_TriggerOnAdvanceCounter(x)   Os_SetTriggerConditions(OS_TRACE_TICK_COU...
  Rationale: The Os_TriggerOnAdvanceCounter(x) macro uses ## to construct a trace ID for the ISR. This usage does not rely on a specific order of evaluation, so its use is acceptable.
 Location  : Os_Cfg.h
  Code     : #define OS_TPL_FOR_TASK(n) OS_TPL_FOR_##n  /* [$UKS 2008] */
  Rationale: The OS_TPL_FOR_TASK(x) macro uses ## to map to the OS_TPL_FOR_ macro. This is an API requirement.
 Location  : Os_Cfg.h
  Code     : #define OS_IMASK_FOR_TASK(n) OS_IMASK_FOR_##n  /* [$UKS 2010] */
  Rationale: The OS_IMASK_FOR_TASK(x) macro uses ## to map to the OS_IMASK_FOR_ macro. This is an API requirement.
 Location  : Os_Cfg.h
  Code     : #define OS_IMASK_FOR_ISR(n) OS_IMASK_FOR_##n  /* [$UKS 2011] */
  Rationale: The OS_IMASK_FOR_ISR(x) macro uses ## to map to the OS_IMASK_FOR_ macro. This is an API requirement.
 Location  : Os_Cfg.h
  Code     : #define Os_LogCat1ISRStart(IsrId)  /* [$UKS 1036] [$UKS 1037] [$UKS 1177] */
  Rationale: The Os_LogCat1ISRStart(x) macro uses ## to construct a trace ID for the ISR. This usage does not rely on a specific order of evaluation, so its use is acceptable.
 Location  : Os_Cfg.h
  Code     : #define Os_LogCat1ISREnd(IsrId)  /* [$UKS 1038] [$UKS 1039] [$UKS 1178] */
  Rationale: The Os_LogCat1ISREnd(x) macro uses ## to construct a trace ID for the ISR. This usage does not rely on a specific order of evaluation, so its use is acceptable.